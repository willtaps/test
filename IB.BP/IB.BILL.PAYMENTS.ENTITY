*
*-----------------------------------------------------------------------------
* <Rating>477</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE IB.BILL.PAYMENTS.ENTITY

*********************************************************************
*
*    First Release       Wednesday, May 10, 2000
*    Developed for :     BSTM, Mozambique
*    Developd by   :     Charl Spamer
*
*********************************************************************
*
    $INCLUDE I_COMMON
    $INCLUDE I_EQUATE
    $INCLUDE I_F.ACCOUNT
    $INSERT I_F.IB.BILL.PAYMENTS.ENTITY
*
*********************************************************************
*
    GOSUB DEFINE.PARAMETERS
*
    IF LEN(V$FUNCTION) GT 1 THEN
        GOTO V$EXIT
    END
*
    CALL MATRIX.UPDATE
*
    GOSUB INITIALISE          ;* Special Initialising
*
*********************************************************************
*                         Main Program Loop                         *
*********************************************************************
*
    LOOP
*
        CALL RECORDID.INPUT

    UNTIL MESSAGE = 'RET' DO

        V$ERROR = ''

        IF MESSAGE = 'NEW FUNCTION' THEN

            GOSUB CHECK.FUNCTION        ;* Special Editing of Function

            IF V$FUNCTION EQ 'E' OR V$FUNCTION EQ 'L' THEN
                CALL FUNCTION.DISPLAY
                V$FUNCTION = ''
            END

        END ELSE

            GOSUB CHECK.ID    ;* Special Editing of ID
            IF V$ERROR THEN GOTO MAIN.REPEAT

            CALL RECORD.READ


            IF MESSAGE = 'REPEAT' THEN
                GOTO MAIN.REPEAT
            END


            GOSUB CHECK.RECORD          ;* Special Editing of Record
            IF V$ERROR THEN GOTO MAIN.REPEAT

            CALL MATRIX.ALTER

            GOSUB PROCESS.DISPLAY       ;* For Display applications

            LOOP
                GOSUB PROCESS.FIELDS    ;* ) For Input
                GOSUB PROCESS.MESSAGE   ;* ) Applications
            WHILE MESSAGE = 'ERROR' DO REPEAT

        END
*
MAIN.REPEAT:
*
    REPEAT
*
    V$EXIT:
*
    RETURN          ;* From main program
*
*************************************************************************
*                      S u b r o u t i n e s                            *
*************************************************************************
PROCESS.FIELDS:

* Input or display the record fields.

    LOOP

        IF SCREEN.MODE EQ 'MULTI' THEN
            IF FILE.TYPE EQ 'I' THEN
*               CALL FIELD.MULTI.INPUT
            END ELSE
                CALL FIELD.MULTI.DISPLAY
            END
        END ELSE
            IF FILE.TYPE EQ 'I' THEN
                CALL FIELD.INPUT
            END ELSE
                CALL FIELD.DISPLAY
            END
        END

    UNTIL MESSAGE <> "" DO

        GOSUB CHECK.FIELDS    ;* Special Field Editing

        IF T.SEQU NE '' THEN T.SEQU<-1> = A + 1

    REPEAT

    RETURN
*
*********************************************************************
PROCESS.MESSAGE:

* Processing after exiting from field input (PF5)

    IF MESSAGE = 'VAL' THEN
        MESSAGE = ''
        BEGIN CASE
        CASE V$FUNCTION EQ 'D'
REM >          GOSUB CHECK.DELETE              ;* Special Deletion checks
        CASE V$FUNCTION EQ 'R'
            GOSUB CHECK.REVERSAL        ;* Special Reversal checks
        CASE OTHERWISE
            GOSUB CROSS.VALIDATION      ;* Special Cross Validation
        END CASE
        IF NOT(V$ERROR) THEN
            GOSUB BEFORE.UNAU.WRITE     ;* Special Processing before write
        END
        IF NOT(V$ERROR) THEN
            CALL UNAUTH.RECORD.WRITE
            IF MESSAGE <> "ERROR" THEN
                GOSUB AFTER.UNAU.WRITE  ;* Special Processing after write
            END
        END
    END

    IF MESSAGE = 'AUT' THEN
        GOSUB AUTH.CROSS.VALIDATION     ;* Special Cross Validation
        IF NOT(V$ERROR) THEN
            GOSUB BEFORE.AUTH.WRITE     ;* Special Processing before write
        END

        IF NOT(V$ERROR) THEN

            CALL AUTH.RECORD.WRITE

            IF MESSAGE <> "ERROR" THEN
                GOSUB AFTER.AUTH.WRITE  ;* Special Processing after write
            END
        END

    END
*
    RETURN
*
*********************************************************************
DEFINE.PARAMETERS:
REM "DEFINE PGM NAME (BY USING 'C/BSTM.INTEREST.RATE/.../G9999')
*********************************************************************
    MAT F = "" ; MAT N = "" ; MAT T = "" ; ID.T = ""
    MAT CHECKFILE = "" ; MAT CONCATFILE = ""
    ID.CHECKFILE = "" ; ID.CONCATFILE = ""
*========================================================================
REM "DEFINE PARAMETERS - SEE 'I_RULES'-DESCRIPTION:
    ID.F = "VENDOR.ID" ; ID.N = "10"
    ID.T = "A"
    ID.CONCATFILE = ""
*
    Z = 0
*
    Z += 1 ; F(Z) = "ENTITY.NAME" ; N(Z) = "35" ; T(Z) = "A"
    Z += 1 ; F(Z) = "ENTITY.ACCOUNT" ; N(Z) = "13" ; T(Z) = "A"
    CHECKFILE(Z) = "ACCOUNT":FM:AC.SHORT.TITLE:FM:'.A'
    Z += 1 ; F(Z) = "RESERVED.8" ; N(Z) = "1" ; T(Z)<3> = "NOINPUT"
    Z += 1 ; F(Z) = "RESERVED.7" ; N(Z) = "1" ; T(Z)<3> = "NOINPUT"
    Z += 1 ; F(Z) = "RESERVED.6" ; N(Z) = "1" ; T(Z)<3> = "NOINPUT"
    Z += 1 ; F(Z) = "RESERVED.5" ; N(Z) = "1" ; T(Z)<3> = "NOINPUT"
    Z += 1 ; F(Z) = "RESERVED.4" ; N(Z) = "1" ; T(Z)<3> = "NOINPUT"
    Z += 1 ; F(Z) = "RESERVED.3" ; N(Z) = "1" ; T(Z)<3> = "NOINPUT"
    Z += 1 ; F(Z) = "RESERVED.2" ; N(Z) = "1" ; T(Z)<3> = "NOINPUT"
    Z += 1 ; F(Z) = "RESERVED.1" ; N(Z) = "1" ; T(Z)<3> = "NOINPUT"
    Z += 1 ; F(Z) = "RESERVED.1" ; N(Z) = "1" ; T(Z)<3> = "NOINPUT"
    Z += 1 ; F(Z) = "XX.LOCAL.REF" ; N(Z)="35" ; T(Z)="A"
    V = Z + 9 ; PREFIX = "IB"
*
    RETURN
*
*********************************************************************
INITIALISE:
*
*
    RETURN
*********************************************************************
CHECK.FUNCTION:
*
    RETURN
*******************************************************************
CHECK.ID:
*
*
    RETURN
*******************************************************************
CHECK.RECORD:
*
*
    RETURN
*******************************************************************
PROCESS.DISPLAY:
*
    RETURN
*******************************************************************
CHECK.FIELDS:
    RETURN
*
******************************************************************
CHECK.DELETE:
*
    RETURN
*******************************************************************
CHECK.REVERSAL:
*
    RETURN
********************************************************************
CROSS.VALIDATION:
*
*
    RETURN
********************************************************************
BEFORE.UNAU.WRITE:
*
    RETURN
********************************************************************
AFTER.UNAU.WRITE:
*
    RETURN
********************************************************************
AUTH.CROSS.VALIDATION:
*
*
    RETURN
********************************************************************
BEFORE.AUTH.WRITE:
*
    RETURN
********************************************************************
AFTER.AUTH.WRITE:
*
    RETURN
*********************************************************************
END
