    SUBROUTINE IB.CLEARING.SB.MT(YR.LINE)

    $INCLUDE ../T24_BP I_COMMON
    $INCLUDE ../T24_BP I_EQUATE
    $INCLUDE ../T24_BP I_GTS.COMMON
    $INCLUDE ../T24_BP I_TSA.COMMON
    $INCLUDE ../T24_BP I_F.TSA.STATUS
    $INCLUDE ../T24_BP I_BATCH.FILES
    $INCLUDE ../T24_BP I_F.TSA.SERVICE
    $INCLUDE ../T24_BP I_F.USER
    $INCLUDE ../T24_BP I_F.COMPANY
    $INCLUDE IB.BP I_IB.ATM.MSG.COMMON
    $INCLUDE IB.BP I_IB.TAG.SB.COMMON
    $INCLUDE IB.BP I_F.IB.CORR.FILE.SB
    $INCLUDE IB.BP I_F.IB.ERMB.SB
    $INSERT I_F.IB.FILE.TAGS.SB
    $INSERT I_F.IB.MESSAGE.TAG.SB
    $INSERT I_F.IB.TAG.GRP.SB
    $INSERT I_F.IB.PARAMETER.SB
    $INSERT I_F.IB.EDST.SUMM.SB
!    $INCLUDE SB.SPARROW.BP I_F.SB.SPARROW.ATM.TXN.NO
    $INSERT IB.BP I_F.IB.FILE.PARAMETER.SB
    $INSERT IB.BP I_F.IB.ATM.POS.LINK.SB
    $INSERT IB.BP I_F.IB.ATM.MESSAGE.LOG.SB
    $INSERT IB.BP I_IB.CLEARING.SB.MT.COMMON
    $INSERT IB.BP I_F.IB.CLEARING.SB.MT.LOG
    $INCLUDE I_F.INTERCO.PARAMETER

    CALL SB.REMOVE.WRONG.CHAR(YR.LINE)
    Y.LINE = FIELD(YR.LINE,'|',1,1)

    IF Y.LINE THEN
        GOSUB MAIN.PROCESS
    END ELSE
        GOSUB FATAL.ERROR
    END
    RETURN
*---------------------
MAIN.PROCESS:
*---------------------
!!checks the control list value and process the respective file line
    M.AC.LOCKED.EVENTS.ID = ""
    MSG.DATA = ""
    YR.MESSAGE.ARRAY = ""
    YMSG.LOG = ""
!!!
    BEGIN CASE
    CASE CONTROL.LIST<1,1>[1,4] = 'EDST'
        GOSUB EDST.MAIN.PROCESS
    CASE CONTROL.LIST<1,1>[1,4] = 'ERMB'
        GOSUB ERMB.MAIN.PROCESS
    CASE CONTROL.LIST<1,1>[1,4] = 'EORI'
        GOSUB EORI.MAIN.PROCESS
    CASE CONTROL.LIST<1,1>[1,4] = 'CCLN'
        GOSUB CCLN.MAIN.PROCESS
    CASE CONTROL.LIST<1,1> = 'ACLK'
        Y.LOCKED.OFS.STRING = Y.LINE
        OFS.SOURCE.ID = "GENERIC.OFS.PROCESS"
        TXN.COMMIT    = 0
        OFS.RESPONSE  = ""

        CALL OFS.CALL.BULK.MANAGER(OFS.SOURCE.ID,Y.LOCKED.OFS.STRING,OFS.RESPONSE,TXN.COMMIT)
        IF OFS.RESPONSE[",",1,1]["/",3,1] EQ '-1' THEN
            CALL OCOMO('FAILED -':Y.LINE:'-':OFS.RESPONSE)
        END ELSE
            CALL OCOMO('SUCCESS -':Y.LINE:'-':OFS.RESPONSE)
!       OFS.TRAN.ID = OFS.RESPONSE
!       OFS.TRAN.ID = OFS.TRAN.ID[",",1,1]
!       OFS.TRAN.ID = OFS.TRAN.ID["/",1,1]
!       IF OFS.TRAN.ID[1,10] EQ "<requests>" THEN
!           Y.TXN.ID = OFS.TRAN.ID[20,99]
!       END
        END
    END CASE

!    GOSUB PROCESS.FILE

!    CALL LOAD.COMPANY( Y.SAVE.COMPANY)
    RETURN
*-----------------
EDST.MAIN.PROCESS:
*-----------------
!!performing EDST process here
    YR.FILE.JULDATE = FIELD(YR.LINE,'|',4,1)
    Y.FILE.NAME = FIELD(YR.LINE,'|',2,1):'*':FIELD(YR.LINE,'|',3,1)
    YMSG.LOG<1,-1> = "REQUEST :":Y.LINE
    CALL OCOMO("WRITE-":YMSG.LOG)
    GOSUB EDST.PROCESS
    GOSUB WRITE.FILE.LOG
    RETURN
*----------------
ERMB.MAIN.PROCESS:
*----------------
!!performing ERMB process here
    YR.FILE.JULDATE = FIELD(YR.LINE,'|',4,1)
    Y.FILE.NAME = FIELD(YR.LINE,'|',2,1):'*':FIELD(YR.LINE,'|',3,1)
    YMSG.LOG<1,-1> = "REQUEST :":Y.LINE
    CALL OCOMO("WRITE-":YMSG.LOG)
    GOSUB ERMB.PROCESS
    GOSUB WRITE.FILE.LOG
    RETURN
*-----------------
EORI.MAIN.PROCESS:
*-----------------
!!performing EORI process here
    Y.FILE.NAME = FIELD(YR.LINE,'|',2,1):'*':FIELD(YR.LINE,'|',4,1)
    YR.FILE.JULDATE = FIELD(YR.LINE,'|',5,1)
    Y.EORI.PROCESS =  FIELD(YR.LINE,'|',3,1)
    YMSG.LOG<1,-1> = "REQUEST :":Y.LINE
*   CALL OCOMO("WRITE-":YMSG.LOG)
    CALL OCOMO("WRITE BEFORE EORI PROCESS-":YMSG.LOG)
    GOSUB EORI.PROCESS
    CALL OCOMO("WRITE AFTER EORI PROCESS-":YMSG.LOG)
    GOSUB WRITE.FILE.LOG
    RETURN
*-----------------
CCLN.MAIN.PROCESS:
*-----------------
!!performing CCLN process here
    YR.FILE.JULDATE = FIELD(YR.LINE,'|',4,1)
    Y.FILE.NAME = FIELD(YR.LINE,'|',2,1):'*':FIELD(YR.LINE,'|',3,1)
    YMSG.LOG<1,-1> = "REQUEST :":Y.LINE
    CALL OCOMO("WRITE-":YMSG.LOG)
    GOSUB CCLN.PROCESS
    GOSUB WRITE.FILE.LOG
    RETURN
************
FATAL.ERROR:
************
!!Error message handled here
    MESSAGE.INFO = ''
    MESSAGE.INFO<1> = 'Line from clearing file is not available'
    MESSAGE.INFO<2> = 'Y.LINE'
    MESSAGE.INFO<3> = ''
    MESSAGE.INFO<4> = ''
    MESSAGE.INFO<5> = 'YES'
    TEXT = ''
    CALL FATAL.ERROR(MESSAGE.INFO)
    RETURN
*----------------
OPEN.OUTPUT.FILE:
*----------------

*Changes done for the Mutithreaded
*    YR.ARC.FILE = YR.IN.FILE:".":SESSION.NO:".":TIME()
*****12/06/17***Changes
* YR.ARC = CONTROL.LIST<1,1>:'.':SESSION.NO
    YR.ARC.FILE = Y.FILE.NAME
    OPENSEQ ARC.PATH , "PROCESSED." : YR.ARC.FILE TO F.OUTPUT ELSE
        CREATE F.OUTPUT ELSE
            NULL
        END
    END
    RETURN
*--------------
EDST.PROCESS:
*--------------
!!!!processing the EDST file's line here
    YMSG = "*************** START EDST - TRANSACTION  ***************"
    GOSUB LOG.ERROR
    CODRESP.VALUE = ""          ;  M.AC.LOCKED.EVENTS.ID = ""
    YRECORD.TYPE = Y.LINE[1,1]  ;  YR.FILE.TYPE = "EDST"
    BEGIN CASE
    CASE YRECORD.TYPE = "1"
        GOSUB EDST.REC.TYP1.PROCESS
    CASE YRECORD.TYPE = "2"
        GOSUB EDST.REC.TYP2.PROCESS
    CASE YRECORD.TYPE = "3"
        GOSUB EDST.REC.TYP3.PROCESS
    CASE YRECORD.TYPE = "6"
        GOSUB EDST.REC.TYP6.PROCESS
    CASE OTHERWISE
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YMSG.LOG<1,-1> = "RESPONSE : NULL - MESSAGE NOT MAPPED"
*        GOSUB WRITE.FILE.LOG
    END CASE
    RETURN
*--------------------
EDST.REC.TYP1.PROCESS:
*--------------------
!!!!processing the EDST record type 1
    M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
    GOSUB READ.IB.FILE.TAGS.SB.FILE
    GOSUB MAP.RECORD
    YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
    YR.MESSAGE.ARRAY<2,-1> = "1100"   ;  YSTATUS = ""
    GOSUB PROCESS.MESSAGE
    YMSG = "CHECKING STATUS OF TRANSACTION RESULT ? " : IFS(YSTATUS=1,"SUCCESS","FAIL")
    GOSUB LOG.ERROR
    IF YSTATUS = 1 THEN
        LOCATE TAG.NRLOG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.NRLOG =  YR.MESSAGE.ARRAY<2,POS>

            GOSUB EDST.REC.TYPE1.PROCESS
        END
    END
    LOCATE YR.MESSAGE.CODE IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
        YR.CODETRN = YR.MESSAGE.ARRAY<2,POS>
    END
    CALL OCOMO("TESTING YR.CODETRN FOR IB.EDST.SUMM.SB UPDATE. ONLY UPDATE IF VALUE [01] THIS ENTRY - " : YR.CODETRN )
    IF YR.CODETRN = "01" THEN
        GOSUB UPDATE.IB.EDST.SUMM.SB.FILE
    END
    RETURN
*---------------------
EDST.REC.TYP6.PROCESS:
*---------------------
!!processing the EDST record type 6
    POS.PL = 0
    M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
    GOSUB READ.IB.FILE.TAGS.SB.FILE
    GOSUB MAP.RECORD
    GOSUB SET.BANK.CODE
    YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
    YR.MESSAGE.ARRAY<2,-1> = "6EDST"
    YR.MESSAGE.ARRAY<1,-1> =  YR.MESSAGE.CODE
    YR.MESSAGE.ARRAY<2,-1> = 33
    GOSUB PROCESS.MESSAGE
    RETURN
*---------------------
EDST.REC.TYP3.PROCESS:
*---------------------
!!processing the EDST record type 3
    POS.PL = 0
    M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
    GOSUB READ.IB.FILE.TAGS.SB.FILE
    GOSUB MAP.RECORD
    YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
    YR.MESSAGE.ARRAY<2,-1> = "3EDST"
    LOCATE YR.MESSAGE.CODE IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
        YR.CODETRN = YR.MESSAGE.ARRAY<2,POS>
        CALL OCOMO("YR.CODETRN=" : YR.CODETRN : " TEST FOR PL.ONLY=" : RAISE(YR.PL.ONLY))
        LOCATE YR.CODETRN IN YR.PL.ONLY<1,1> SETTING POS ELSE
            GOSUB PROCESS.MESSAGE
        END
    END
    POS.PL = 1
    GOSUB CLEAN.TAGS
    GOSUB SET.BANK.CODE
    GOSUB PROCESS.MESSAGE
    POS.PL = 0
    RETURN
*---------------------
EDST.REC.TYP2.PROCESS:
*---------------------
!!processing the EDST record type 2
    POS.PL = 0
    M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
    GOSUB READ.IB.FILE.TAGS.SB.FILE
    GOSUB MAP.RECORD
    YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
    YR.MESSAGE.ARRAY<2,-1> = YRECORD.TYPE:YR.FILE.TYPE
    YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
    YR.MESSAGE.ARRAY<2,-1> = "1100"
    LOCATE YR.MESSAGE.CODE IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
        IF  YR.MESSAGE.ARRAY<2,POS> = "00" THEN
            YR.MESSAGE.ARRAY<2,POS> = 33
        END
    END ELSE
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.CODE
        YR.MESSAGE.ARRAY<2,-1> = 33
    END
    GOSUB PROCESS.MESSAGE
    RETURN
*--------------
ERMB.PROCESS:
*-------------
!!processing the ERMB lines here
    YRECORD.TYPE = Y.LINE[1,1]
    YR.FILE.TYPE = "ERMB"
    BEGIN CASE
    CASE  YRECORD.TYPE = "1"
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
        YR.MESSAGE.ARRAY<2,-1> = "1ERMB"
        GOSUB UPDATE.ERMB.FILE
    CASE OTHERWISE
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YMSG.LOG<1,-1> = "RESPONSE : NULL - MESSAGE NOT MAPPED"
*        GOSUB WRITE.FILE.LOG
    END CASE
    RETURN
*-------------
CCLN.PROCESS:
*-------------
!!processing the CCLN lines here
    YRECORD.TYPE = Y.LINE[1,1]
    YR.FILE.TYPE = "CCLN"
    BEGIN CASE
    CASE  YRECORD.TYPE = "2"
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
        YR.MESSAGE.ARRAY<2,-1> = YRECORD.TYPE:YR.FILE.TYPE
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.CODE
        YR.MESSAGE.ARRAY<2,-1> = "71"
        GOSUB PROCESS.MESSAGE
    CASE OTHERWISE
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        YMSG.LOG<1,-1> = "RESPONSE : NULL - MESSAGE NOT MAPPED"
*        GOSUB WRITE.FILE.LOG
    END CASE
    RETURN
*--------------
EORI.PROCESS:
*--------------
!!processing the EORI file here
    YRECORD.TYPE = Y.LINE[1,1]   ;  YR.FILE.TYPE = "EORI"
    YMSG.ERR = ""   ;     TAG.314.VALUE = ""
    IF NOT(Y.EORI.PROCESS) THEN
        RETURN
    END
    BEGIN CASE
    CASE YRECORD.TYPE = "1" OR YRECORD.TYPE = "2"
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
        YR.MESSAGE.ARRAY<2,-1> = YRECORD.TYPE:YR.FILE.TYPE
        YR.MESSAGE.ARRAY<1,-1> = IB.BANK.ID.CODE.TAG
        YR.MESSAGE.ARRAY<2,-1> = TRIM(R.IB.PARAMETER.SB<IB.PARM.OWN.BANK.CODE>)
        GOSUB CHK.EORI.REC1.PROCESS
        GOSUB CHK.EORI.AMT
        IF YRECORD.TYPE = "2" THEN
            M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
            GOSUB READ.IB.FILE.TAGS.SB.FILE
            GOSUB MAP.RECORD
            LOCATE TAG.330 IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
                YR.AMT = YR.MESSAGE.ARRAY<2,POS> * 1
                GOSUB EORI.REC.TYPE2.PROCESS
            END ELSE
                YMSG.ERR:= "TAG 300 NOT FOUND - SKIP TRANSACTION"
            END
        END
    CASE OTHERWISE
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YMSG.ERR = "NULL - MESSAGE NOT MAPPED TIPREG=": YRECORD.TYPE
    END CASE
    IF YMSG.ERR THEN
        YMSG.LOG<1,-1> = "RESPONSE:" : YMSG.ERR
*        GOSUB WRITE.FILE.LOG
        YMSG.ERR = ""
    END
    RETURN
*-----------------
CHK.EORI.AMT:
*-----------------
!!checks the amount and process the message
    IF YTXN.AMT THEN
        YTXN.AMT -= ADJ.AMT
        IF NOT(YTXN.AMT) THEN
            YMSG.LOG<1,-1> = "RESPONSE : SKIP TXN.AMOUNT NULL "
*           GOSUB WRITE.FILE.LOG
        END ELSE
            YR.MESSAGE.ARRAY<1,-1> = 8
            YR.MESSAGE.ARRAY<2,-1> = YTXN.AMT

            YR.MESSAGE.ARRAY<1,-1> =  YR.MESSAGE.CODE
            YR.MESSAGE.ARRAY<2,-1> = 33

            YR.MESSAGE.ARRAY<1,-1> =  IB.TERM.TYPE.TAG
            YR.MESSAGE.ARRAY<2,-1> = "A"

            YR.SAVE.ID.PARAMS = R.IB.PARAMETER.SB<IB.PARM.MSG.KEY>
            R.IB.PARAMETER.SB<IB.PARM.MSG.KEY> = EORI.KEY.TAGS
            GOSUB PROCESS.MESSAGE
            R.IB.PARAMETER.SB<IB.PARM.MSG.KEY> = YR.SAVE.ID.PARAMS
        END
    END ELSE
        YMSG.ERR:= " SKIP AMOUNT IS NULL"
    END
    RETURN
*--------------------------
CHK.EORI.REC1.PROCESS:
*--------------------------
!!checks the EORI record type 1 process
    YR.TERMINAL.ID = ""
    LOCATE "178" IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
        YR.MESSAGE.ARRAY<1,-1> = IB.TERMINAL.ID.TAG
        YR.TERMINAL.ID = FMT(YR.MESSAGE.ARRAY<2,POS> ,'R%10')
        YR.MESSAGE.ARRAY<2,-1> = YR.TERMINAL.ID
    END
    LOCATE "308" IN YR.MESSAGE.ARRAY<1,1> SETTING POS ELSE
        YR.MESSAGE.ARRAY<1,POS> = 308
        YR.MESSAGE.ARRAY<2,POS> = YR.FILE.JULDATE
    END
    TAG.118.VALUE=""
    LOCATE "118" IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
        TAG.118.VALUE = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
    END
    YTXN.AMT = 0
    LOCATE "114" IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
        YTXN.AMT = YR.MESSAGE.ARRAY<2,POS> * 1
    END
    LOCATE "314" IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
        TAG.314.VALUE = YR.MESSAGE.ARRAY<2,POS>
        YMSG = "TAG 314 HAS VALUE " : TAG.314.VALUE
        CALL OCOMO(YMSG)
    END
    M.IB.EDST.SUMM.SB.ID = YR.FILE.JULDATE:".":YR.TERMINAL.ID : "." : TAG.314.VALUE : "." : TAG.118.VALUE
    CALL OCOMO("M.IB.EDST.SUMM.SB.ID=" : M.IB.EDST.SUMM.SB.ID)
    ADJ.AMT = 0
    IF TAG.314.VALUE = "1" THEN
!Fix to avoid wrong EDST.SUM balance update - Start
!        READ R.IB.EDST.SUMM.SB FROM F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID THEN
RETRY.EDST.SUMM:
        R.IB.EDST.SUMM.SB=''
        READU R.IB.EDST.SUMM.SB FROM F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID LOCKED
            CALL OCOMO("1 F.IB.EDST.SUMM.SB>M.IB.EDST.SUMM.SB.ID=":M.IB.EDST.SUMM.SB.ID:" IS LOCKED ON PORT: ":SYSTEM(43))
            SLEEP 1
            GOTO RETRY.EDST.SUMM
        END THEN
            CALL OCOMO("1 F.IB.EDST.SUMM.SB>M.IB.EDST.SUMM.SB.ID=":M.IB.EDST.SUMM.SB.ID:" IS NOW READ AND LOCKED")
        END ELSE
            CALL OCOMO("1 F.IB.EDST.SUMM.SB>M.IB.EDST.SUMM.SB.ID=":M.IB.EDST.SUMM.SB.ID:" IS NEW RECORD")
!!!            RELEASE F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID
        END
!Fix to avoid wrong EDST.SUM balance update - End
        ADJ.AMT = SUM(R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TOTAMT>)
        CALL OCOMO("EORI R.IB.EDST.SUMM.SB=":M.IB.EDST.SUMM.SB.ID:'=':R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TOTAMT>:'=':R.IB.EDST.SUMM.SB<IB.EDST.SUMM.AMOUNT>)
    END
    RETURN
*-----------
CLEAN.TAGS:
*-----------
    NO.TAGS = DCOUNT(YR.MESSAGE.ARRAY<1>,VM)
    FOR J = 1 TO NO.TAGS
        YR.MESSAGE.ARRAY<1,J> = YR.MESSAGE.ARRAY<1,J> * 1
    NEXT J
    RETURN
*--------------
MAP.RECORD:
*--------------
!!checks the mapping for the line
    YR.TERM = ""   ;   YR.CODE.TXN = ""
    CALL OCOMO("MAPPING RECORD")
    YR.POS =1      ;   YR.MESSAGE.ARRAY = "" ; FILE.POS = 1
    NO.TAGS = DCOUNT(R.IB.FILE.TAGS.SB<IB.FL.TAGS.TAG.NO>, VM )
    FOR NN = 1 TO  NO.TAGS
        M.IB.MESSAGE.TAG.SB.ID = R.IB.FILE.TAGS.SB<IB.FL.TAGS.TAG.NO,NN>
        GOSUB READ.IB.MESSAGE.TAG.SB.FILE
        YTAG.LENTH = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.LENGHT>
        YVALUE = Y.LINE[FILE.POS,YTAG.LENTH]
        FILE.POS += YTAG.LENTH
        IF M.IB.MESSAGE.TAG.SB.ID  =  YR.MESSAGE.CODE THEN
            YR.VARIABLE.TAG = YVALUE
        END
        LOCATE M.IB.MESSAGE.TAG.SB.ID IN FILE.VARIABLE.DATA SETTING V.POS THEN
            VARIABLE.DATA = YVALUE
            GOSUB PROCESS.VARIABLE.DATA
        END ELSE
            YR.MESSAGE.ARRAY<1, YR.POS> =  M.IB.MESSAGE.TAG.SB.ID * 1
            YR.MESSAGE.ARRAY<2,YR.POS> = YVALUE
            YR.POS += 1
            CALL OCOMO( "TAG=:" : M.IB.MESSAGE.TAG.SB.ID : " YVALUE=:" : YVALUE )
        END
        BEGIN CASE
        CASE M.IB.MESSAGE.TAG.SB.ID = "003"
            YR.TERM = YVALUE
        CASE  M.IB.MESSAGE.TAG.SB.ID = "120"
            YR.CODE.TXN = YVALUE
        END CASE
        IF M.IB.FILE.TAGS.SB.ID = "HEADER" AND R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONSTANT.VALUE,1>[1,1] = "!" THEN
            BEGIN CASE
            CASE R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONSTANT.VALUE,1>[2,99] = "YR.FILE.TYPE"
                YR.FILE.TYPE = YVALUE
            CASE OTHERWISE
                NULL
            END CASE
        END
    NEXT NN
    GOSUB LOG.MESSAGE
    RETURN
*----------------------
PROCESS.VARIABLE.DATA:
*----------------------
!!read the Variable data here
    VAR.POS = 1
    CALL OCOMO("VAR.DATA=" : VARIABLE.DATA )
    VAR.DATA.ID = M.IB.FILE.TAGS.SB.ID : "." : YR.TERM : YR.CODE.TXN
    CALL OCOMO("VAR.DATA.ID=": VAR.DATA.ID)
    R.VAR.TAGS = ""   ; YERR = ""
    CALL F.READ(FN.IB.FILE.TAGS.SB, VAR.DATA.ID, R.VAR.TAGS, F.IB.FILE.TAGS.SB, YERR)
    IF YERR THEN
        CALL OCOMO("VAR.DATA NOT FOUND RETURN FULL STRING ....")
        YR.MESSAGE.ARRAY<1, YR.POS> =  M.IB.MESSAGE.TAG.SB.ID * 1
        YR.MESSAGE.ARRAY<2,YR.POS> = YVALUE
        YR.POS += 1
        CALL OCOMO( "TAG=:" : M.IB.MESSAGE.TAG.SB.ID : " YVALUE=:" : YVALUE )
    END ELSE
        NO.VAR.TAGS = DCOUNT(R.VAR.TAGS<IB.FL.TAGS.TAG.NO>, VM )
        FOR VV = 1 TO  NO.VAR.TAGS
            M.IB.MESSAGE.TAG.SB.ID = R.VAR.TAGS<IB.FL.TAGS.TAG.NO,VV>
            GOSUB READ.IB.MESSAGE.TAG.SB.FILE
            YTAG.LENTH = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.LENGHT>
            YVALUE = VARIABLE.DATA[VAR.POS,YTAG.LENTH]
            VAR.POS += YTAG.LENTH
            YR.MESSAGE.ARRAY<1, YR.POS> =  M.IB.MESSAGE.TAG.SB.ID * 1
            YR.MESSAGE.ARRAY<2,YR.POS> = YVALUE
            YR.POS += 1
            CALL OCOMO( "TAG=:" : M.IB.MESSAGE.TAG.SB.ID : " YVALUE=:" : YVALUE )
        NEXT VV
    END
    RETURN
*-----------
LOG.MESSAGE:
*-----------
!!assigns the file name
    CALL OCOMO("LOG MESSAGE")
    IF YR.FILE.TYPE THEN
        IF YRECORD.TYPE <> "0" AND  YRECORD.TYPE <> "9" THEN
            YR.FILE.NAME = YR.FILE.TYPE
*CALL IB.MSG.LOG.RUN.SB(YR.FILE.NAME)
        END
    END
    RETURN
*-------------
SET.BANK.CODE:
*-------------
    LOCATE IB.BANK.ID.CODE.TAG IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS ELSE
        YR.MESSAGE.ARRAY<MSG.TAG.ID,POS> = IB.BANK.ID.CODE.TAG
    END
    YR.MESSAGE.ARRAY<2,POS> = TRIM(R.IB.PARAMETER.SB<IB.PARM.OWN.BANK.CODE>)
    RETURN
*-------------
GET.TRANS.ID:
*-------------
!!get the trans key id
    BEGIN CASE
    CASE YR.EDST.SUMM
        YR.TRANS.KEY.ID = M.IB.EDST.SUMM.SB.ID
    CASE YR.FILE.TYPE = "EORI"
        YR.TRANS.KEY.ID = M.IB.EDST.SUMM.SB.ID
    CASE OTHERWISE
        YR.TRANS.KEY.ID = ""
        NO.IDS = DCOUNT(R.IB.PARAMETER.SB<IB.PARM.MSG.KEY>,VM)
        FOR KK = 1 TO NO.IDS
            TAG.ID = TRIM(R.IB.PARAMETER.SB<IB.PARM.MSG.KEY,KK>,  "0", "L")
            LOCATE TAG.ID IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
                YR.TRANS.KEY.ID := TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
            END
        NEXT KK
        YR.TRANS.KEY.ID = CHANGE(YR.TRANS.KEY.ID," ","")
    END CASE
    CALL OCOMO("YR.TRANS.KEY.ID=" : YR.TRANS.KEY.ID)
    RETURN
*------------------
CHECK.TRANSACTION:
*------------------
!!checking the transaction conditions processed here
    CALL OCOMO("CHECKING TRANSACTION CONDITIONS - ALREADY PROCESSED")
    GOSUB GET.TRANS.ID
    YR.IS.DUPLICATE = 0
    IF POS.PL THEN
        YR.TRANS.KEY.ID := "PL"
    END
    IF EORI.TAG.330 THEN
        YR.TRANS.KEY.ID := ".330"
    END
    CALL F.READ(FN.IB.ATM.MESSAGE.LOG.SB, YR.TRANS.KEY.ID , R.IB.ATM.MESSAGE.LOG.SB, F.IB.ATM.MESSAGE.LOG.SB, YERR)
    YMSG = 'YR.TRANS.KEY.ID=' : YR.TRANS.KEY.ID
    CALL OCOMO( YMSG )

*   skip duplicate check for fecho pagamento servico
    Y.SKYP.DUP.CHECK = 0
    LOCATE TAG.NRLOG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
        YR.NRLOG.LOCAL =  YR.MESSAGE.ARRAY<2,POS>
        IF YRECORD.TYPE EQ 3 AND YR.NRLOG.LOCAL EQ '00000000' THEN
            Y.SKYP.DUP.CHECK = 1
        END
    END

    IF R.IB.ATM.MESSAGE.LOG.SB AND Y.SKYP.DUP.CHECK EQ 0 THEN
        YR.IS.DUPLICATE = 1
        YMSG := " DUPLICATE"
    END ELSE
        YMSG := " NOT FOUND"
    END
    GOSUB LOG.ERROR
    RETURN
*----------------
PROCESS.MESSAGE:
*----------------
!!processing the message here
    CALL OCOMO("BEGIN - PROCESS.MESSAGE")
    GOSUB CHECK.TRANSACTION
    IF YR.IS.DUPLICATE THEN
        YMSG.LOG<1,-1> = "RESPONSE : " : YMSG
*        GOSUB WRITE.FILE.LOG
        RETURN
    END
    GOSUB CHECK.PROCESS.RULES
    IF NOT(M.CONTINUE) THEN
        YMSG.LOG<1,-1> =  "RESPONSE : CONDITIONS NOT MET-" : YMSG
*        GOSUB WRITE.FILE.LOG
        RETURN
    END
    INMSG = ""
    CALL OCOMO("CALLING IB.ATM.MSG.TEXT.IN")
    CALL IB.ATM.MSG.TEXT.IN ( INMSG )
    CALL OCOMO("RETURN-VALUE=" : INMSG)
    IF INMSG THEN
        NO.MSG = DCOUNT(INMSG,FM)
        FOR MM = 1 TO NO.MSG
            REQUEST = INMSG<MM>
            RESPONSE = ""
            CALL OCOMO("YR.MESSAGE.ARRAY=":YR.MESSAGE.ARRAY)
            CALL OCOMO("OFS REQUEST=" : REQUEST)

!To handle credit account locking issue 30-AUG-2017 - S
            Y.COMPANY=FIELD(REQUEST,'/',8,1)
            Y.CRACC.INDX=INDEX(REQUEST,'CREDIT.ACCT.NO:1:1=',1) + 19
            Y.CRACC=FIELD(REQUEST[Y.CRACC.INDX,40],',',1)
            Y.ACCT.ID=Y.CRACC

            READ R.CMP FROM FV.COMPANY,Y.COMPANY ELSE R.CMP<EB.COM.MNEMONIC>='BNK'
            Y.MNE=R.CMP<EB.COM.MNEMONIC>
            FN.CRACCOUNT = 'F':Y.MNE:'.ACCOUNT'
            F.CRACCOUNT = ''
            CALL OPF(FN.CRACCOUNT, F.CRACCOUNT)
            TRYCNT=1
!===========
PROCESS.LCK:
!===========
!Try to get the account lock before EB.ACCOUNTING to avoid other agents locking this account
!Incase already account locked then retry after 5 seconds to get the lock
!Even after 100 retries the lock not released by the other agent then go with normal locking
!to end up with usual error Timed out waiting for lock
            CALL F.READU(FN.CRACCOUNT, Y.ACCT.ID, R.ACCT, F.CRACCOUNT, SERRACCT, 'R 1 10')
            IF SERRACCT EQ "RECORD LOCKED" THEN
                SLEEP 5
                CALL OCOMO('Record ' :Y.ACCT.ID :' locked ' :FN.CRACCOUNT:' Retry ':TRYCNT)
                TRYCNT+=1
                IF TRYCNT GE 100 THEN
                    CALL OCOMO('Record ' :Y.ACCT.ID :' locked ' :FN.CRACCOUNT:'  Failed to own locking even after Retry  ':TRYCNT:' Moving to default core locking processing')
                END ELSE
                    GOTO PROCESS.LCK
                END
            END
!To handle credit account locking issue 30-AUG-2017 - E

            HUSH ON
            CALL OFS.PROCESS.MANAGER(REQUEST,RESPONSE)
            HUSH OFF
            CALL OCOMO("RESPONSE=" : RESPONSE)
            YMSG.LOG<1,-1> = "RESPONSE : " : RESPONSE
*            GOSUB WRITE.FILE.LOG
            ID.NEW = RESPONSE["/",1,1]
            YSTATUS = RESPONSE[",",1,1]["/",3,1]
            IF YSTATUS = 1 THEN
                GOSUB UPDATE.STATUS
            END ELSE
                GOSUB UPDATE.ERROR
            END
        NEXT MM
    END
    RETURN
*--------------------------
READ.IB.FILE.TAGS.SB.FILE:
*--------------------------
!!reads the IB.FILE.TAGS.SB application
    CALL F.READ(FN.IB.FILE.TAGS.SB, M.IB.FILE.TAGS.SB.ID, R.IB.FILE.TAGS.SB, F.IB.FILE.TAGS.SB, ERR.IB.FILE.TAGS.SB)
    RETURN
*----------------------------
READ.IB.MESSAGE.TAG.SB.FILE:
*----------------------------
!!read IB.MESSAGE.TAG.SB application
    CALL F.READ(FN.IB.MESSAGE.TAG.SB, M.IB.MESSAGE.TAG.SB.ID, R.IB.MESSAGE.TAG.SB, F.IB.MESSAGE.TAG.SB, YERR)
    RETURN
*------------------------
READ.IB.TAG.GRP.SB.FILE:
*------------------------
!!reads the IB.TAG.GRP.SB application
    CALL F.READ(FN.IB.TAG.GRP.SB, M.IB.TAG.GRP.SB.ID, R.IB.TAG.GRP.SB, F.IB.TAG.GRP.SB, YERR)
    RETURN
*---------------
UPDATE.ERROR:
*---------------
!!writes the error details into the file
    IF YR.EDST.SUMM  THEN
        RETURN
    END
    M.IB.CORR.FILE.SB.ID = YR.TRANS.KEY.ID
    READ R.IB.CORR.FILE.SB FROM  F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID ELSE
        YERR = "RECORD NOT FOUND"
    END
    IF R.IB.CORR.FILE.SB THEN
        M.IB.CORR.FILE.SB.HIST.ID = M.IB.CORR.FILE.SB.ID : ";" : R.IB.CORR.FILE.SB< IB.CORR.CURR.NO >
        WRITE R.IB.CORR.FILE.SB TO F.IB.CORR.FILE.SB.HIST, M.IB.CORR.FILE.SB.HIST.ID ON ERROR NULL
    END
    R.IB.CORR.FILE.SB< IB.CORR.CURR.NO > += 1
    R.IB.CORR.FILE.SB<IB.CORR.TXN.REF> = YR.ARC.FILE
    OFS.ERROR = RESPONSE[",",2,99999]
*R.IB.CORR.FILE.SB<IB.CORR.OFS.ERROR> = CHANGE(OFS.ERROR,",",@VM)
    R.IB.CORR.FILE.SB<IB.CORR.OFS.ERROR> = CHANGE(OFS.ERROR,",",VM)

    YNO = DCOUNT(YR.MESSAGE.ARRAY<1>,VM)
    FOR NN = 1 TO YNO
        IF LEN(YR.MESSAGE.ARRAY<1,NN>) < 3 THEN
            YR.MESSAGE.ARRAY<1,NN> = FMT(YR.MESSAGE.ARRAY<1,NN>,'R%3')
        END
    NEXT NN
    R.IB.CORR.FILE.SB<IB.CORR.TAG> = YR.MESSAGE.ARRAY<1>
    R.IB.CORR.FILE.SB<IB.CORR.VALUE> = YR.MESSAGE.ARRAY<2>
    TIME.VAL = TIMEDATE()
    R.IB.CORR.FILE.SB<IB.CORR.INPUTTER> = TNO:"_":OPERATOR
    R.IB.CORR.FILE.SB<IB.CORR.AUTHORISER> = TNO:"_":OPERATOR
    X = OCONV(DATE(),"D-")
    X = X[9,2]:X[1,2]:X[4,2]:TIME.VAL[1,2]:TIME.VAL[4,2]
    R.IB.CORR.FILE.SB<IB.CORR.DATE.TIME> = X
    R.IB.CORR.FILE.SB<IB.CORR.CO.CODE> = ID.COMPANY
    R.IB.CORR.FILE.SB<IB.CORR.DEPT.CODE>=R.USER<EB.USE.DEPARTMENT.CODE>

    WRITE R.IB.CORR.FILE.SB TO F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID ON ERROR NULL
    CALL OCOMO( "WRITING ERROR FILE " : M.IB.CORR.FILE.SB.ID)
    RETURN
*------------------
UPDATE.ERMB.FILE:
*------------------
!!updates the ERMB file here
    IF YR.FILE.TYPE <> "ERMB" THEN
        RETURN
    END
    R.RECORD = ""
    MSG.DATA = YR.MESSAGE.ARRAY
    APP.NAME = "IB.ERMB.SB"
    M.IB.ERMB.SB.ID = ""
    NO.TAGS = DCOUNT(MSG.DATA<MSG.TAG.ID>,VM)
    FOR TT = 1 TO NO.TAGS
        M.IB.MESSAGE.TAG.SB.ID = FMT(MSG.DATA<MSG.TAG.ID,TT>,'R%3')
        TAG.VALUE = ""
        CALL F.READ(FN.IB.MESSAGE.TAG.SB, M.IB.MESSAGE.TAG.SB.ID, R.IB.MESSAGE.TAG.SB,F.IB.MESSAGE.TAG.SB,YERR)
        TAG.VALUE = ""
        M.IB.MESSAGE.TAG.SB.ID *= 1
        LOCATE M.IB.MESSAGE.TAG.SB.ID IN MSG.DATA<MSG.TAG.ID,1> SETTING POS THEN
            TAG.VALUE = TRIM(MSG.DATA<MSG.TAG.VALUE,POS>)
        END
        Y.CALC.VALUE=""
        YMSG = "M.IB.MESSAGE.TAG.SB.ID=" : M.IB.MESSAGE.TAG.SB.ID : " VALUE=" : TAG.VALUE
        GOSUB LOG.ERROR
        GOSUB CHK.ERMB.PROCESS.UPDATE
    NEXT TT
    M.IB.ERMB.SB.ID = R.RECORD<IB.ERMB.FICH> : R.RECORD<IB.ERMB.IDFICH>
    TIME.VAL = TIMEDATE()
    R.RECORD<IB.ERMB.CURR.NO> = 1
    R.RECORD<IB.ERMB.INPUTTER> = TNO:"_":OPERATOR
    R.RECORD<IB.ERMB.AUTHORISER> = TNO:"_":OPERATOR
    X = OCONV(DATE(),"D-")
    X = X[9,2]:X[1,2]:X[4,2]:TIME.VAL[1,2]:TIME.VAL[4,2]
    R.RECORD<IB.ERMB.DATE.TIME> = X
    R.RECORD<IB.ERMB.CO.CODE> = ID.COMPANY
    R.RECORD<IB.ERMB.DEPT.CODE>=R.USER<EB.USE.DEPARTMENT.CODE>
    WRITE R.RECORD TO F.IB.ERMB.SB, M.IB.ERMB.SB.ID ON ERROR NULL
    YMSG.LOG<1,-1> = FN.IB.ERMB.SB :" ID=" : M.IB.ERMB.SB.ID
*    GOSUB WRITE.FILE.LOG
    RETURN
*----------------------------
UPDATE.IB.EDST.SUMM.SB.FILE:
*----------------------------
!!update the IB.EDST.SUMM.SB file
    GOSUB CLEAN.TAGS
    M.IB.EDST.SUMM.SB.ID = YR.FILE.JULDATE
    M.TAG.ID = ERMB.ID.TAGS
    YR.TERMINAL.ID = ""
    LOCATE M.TAG.ID IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
        YR.TERMINAL.ID = FMT(TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>),'R%10')
        M.IB.EDST.SUMM.SB.ID  := "." : YR.TERMINAL.ID
    END
    M.IB.EDST.SUMM.SB.ID := "." : YRECORD.TYPE
    YR.TAG.118.VALUE=""
    LOCATE "118" IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
        YR.TAG.118.VALUE = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
    END
    M.IB.EDST.SUMM.SB.ID  := "." : YR.TAG.118.VALUE
    CALL OCOMO("M.IB.EDST.SUMM.SB.ID=":M.IB.EDST.SUMM.SB.ID)
!Fix to avoid wrong EDST.SUM balance update - Start
!    READ R.IB.EDST.SUMM.SB FROM F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID ELSE
!        NULL
!    END
RETRY.EDST.SUMM2:
    R.IB.EDST.SUMM.SB=''
    READU R.IB.EDST.SUMM.SB FROM F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID LOCKED
        CALL OCOMO("2 F.IB.EDST.SUMM.SB>M.IB.EDST.SUMM.SB.ID=":M.IB.EDST.SUMM.SB.ID:" IS LOCKED ON PORT: ":SYSTEM(43))
        SLEEP 1
        GOTO RETRY.EDST.SUMM2
    END THEN
        CALL OCOMO("2 F.IB.EDST.SUMM.SB>M.IB.EDST.SUMM.SB.ID=":M.IB.EDST.SUMM.SB.ID:" IS NOW READ AND LOCKED")
    END ELSE
        CALL OCOMO("2 F.IB.EDST.SUMM.SB>M.IB.EDST.SUMM.SB.ID=":M.IB.EDST.SUMM.SB.ID:" IS NEW RECORD")
!!!            RELEASE F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID
    END
!Fix to avoid wrong EDST.SUM balance update - End
    IF NOT(R.IB.EDST.SUMM.SB) THEN
        LAST.POS = 1
    END ELSE
        LAST.POS = DCOUNT(R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TXN.REF>,VM) + 1
    END
    GOSUB GET.TRANS.ID
    GOSUB IB.EDST.SUMM.SB.SUB.UPDATE
    RETURN
*--------------------------
IB.EDST.SUMM.SB.SUB.UPDATE:
*--------------------------
!!checks the trans key id
    LOCATE YR.TRANS.KEY.ID IN R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TXN.REF,1> SETTING TRN.POS THEN
        YMSG.LOG<1,-1> = FN.IB.EDST.SUMM.SB : " FILE UPDATE SKIPPED TXN ALREADLY UPDATED " : YR.TRANS.KEY.ID
*        GOSUB WRITE.FILE.LOG
    END ELSE
        R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TXN.REF,LAST.POS> =  YR.TRANS.KEY.ID
        TXN.AMT = ""
        LOCATE "8" IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
            TXN.AMT = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
            TXN.SIGN = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS+1>)
            IF TXN.SIGN = "C" THEN
                TXN.AMT *= -1
            END
        END

        YMSG = "YR.TERMINAL.ID=[" :  YR.TERMINAL.ID : "] TXN.AMT=[" : TXN.AMT : "]"
        CALL OCOMO(YMSG)
        IF TXN.AMT THEN
            R.IB.EDST.SUMM.SB<IB.EDST.SUMM.AMOUNT,LAST.POS> = TXN.AMT
            R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TOTAMT> = SUM(R.IB.EDST.SUMM.SB<IB.EDST.SUMM.AMOUNT>)
            YMSG = "WRITING F.IB.EDST.SUMM.SB>" : M.IB.EDST.SUMM.SB.ID
            CALL OCOMO(YMSG)
            WRITE R.IB.EDST.SUMM.SB TO F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID
            CALL OCOMO("EDST R.IB.EDST.SUMM.SB=":M.IB.EDST.SUMM.SB.ID:'=':R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TOTAMT>:'=':R.IB.EDST.SUMM.SB<IB.EDST.SUMM.AMOUNT>)
        END
    END
    RETURN
*----------------------
CHECK.PROCESS.RULES:
*------------------------
!!checks the rules with params file
    CALL OCOMO("CHECK-RULES WITH PARAMS [ YR.FILE.TYPE=" : YR.FILE.TYPE : " YRECORD.TYPE=": YRECORD.TYPE : " ]")
    M.CONTINUE = 0

    BEGIN CASE

    CASE YR.EDST.SUMM
        CALL OCOMO("YR.EDST.SUMM=" : YR.EDST.SUMM : " ALWAYS UPDATE")
        M.CONTINUE = 1
    CASE YR.FILE.TYPE = "CCLN"
        LOCATE "161.1" IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.RETURN = YR.MESSAGE.ARRAY<2,POS>
            CALL IB.TAG.161.SB
            IF YR.RETURN THEN
                M.CONTINUE = 1
            END
        END

    CASE YR.FILE.TYPE = "EORI" AND (YRECORD.TYPE = "2" OR YRECORD.TYPE = "1")
        M.CONTINUE = 1
        CALL OCOMO("FILE TYPE=EORI AND TIPREG=" : YRECORD.TYPE :" - SET UPDATE TO TRUE")

    CASE YRECORD.TYPE = "3"
        GOSUB MESSAGE.THREE.PROCESS

    CASE YR.FILE.TYPE = "EDST" AND YRECORD.TYPE = "1"
        M.CONTINUE = 1
        GOSUB MESSAGE.ONE.TWO.PROCESS

    CASE YR.FILE.TYPE = "EDST" AND YRECORD.TYPE = "2"
        M.CONTINUE = 1
        GOSUB MESSAGE.ONE.TWO.PROCESS

    CASE YRECORD.TYPE = "6"
        CALL OCOMO('YRECORD.TYPE = "6"')

        LOCATE YR.SISTPAG.TAG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.SISTPAG = YR.MESSAGE.ARRAY<2,POS>
            YMSG = "YR.SISTPAG=" : YR.SISTPAG
            CALL OCOMO(YMSG)
            IF YR.SISTPAG = "9" THEN
                M.CONTINUE = 1
            END
        END

    END CASE
    CALL OCOMO("RETURN M.CONTINUE=" : M.CONTINUE )
    RETURN
*------------------------
MESSAGE.ONE.TWO.PROCESS:
*------------------------
!!check modenv for values on parameter this run settings
    YMSG = "TESTING VALUE OF TAG.CODRESP SEEKING [N] IS THIS REVERSAL"
    GOSUB LOG.ERROR
    LOCATE TAG.CODRESP IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
        CODRESP.VALUE = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
        IF CODRESP.VALUE  = "N" THEN
            GOSUB GET.REVERSAL.ID
            YMSG = "CODRESP VALUE [N] - DUPLICATE TEST ? " : IFS(M.CONTINUE=1,"ORG ENTRY POSTED","ORG ENTRY NOT FOUND - SKIP")
            RETURN
        END
    END
    YMSG = "TEST MODENV FOR VALUE <> " : CHECK.MODENV.VALUE
    GOSUB LOG.ERROR
    GOSUB CHK.MODENV.PROCESS
    IF Y.EX.FLAG THEN
        Y.EX.FLAG = ''
        RETURN
    END
    YMSG = "STANDARD PROCESSING - CHECK MODENV FOR VALUES ON PARAMETER THIS RUN SETTINGS [" : MODENV.CHECKING : "]"
    GOSUB LOG.ERROR
    IF MODENV.CHECKING THEN
        LOCATE YR.MODENV.VALUE IN YR.MODENV.LIST<1,1> SETTING POS THEN
            M.CONTINUE = 1
            YMSG = "YR.MODENV.VALUE=" : YR.MODENV.VALUE  : " CONDITION MET"
        END ELSE
            YMSG = "YR.MODENV.VALUE=" : YR.MODENV.VALUE  : " CONDITION NOT MET - SKIP"
        END
        GOSUB LOG.ERROR
    END
    RETURN
*-----------------
CHK.MODENV.PROCESS:
*-----------------
!!checks the MODENV value
    IF TEST.MODENV.REQ THEN
        LOCATE YR.MODENV.TAG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.MODENV.VALUE = YR.MESSAGE.ARRAY<2,POS>
            YMSG =  "YR.MODENV.VALUE=" : YR.MODENV.VALUE
            CALL OCOMO(YMSG)
            IF YR.MODENV.VALUE EQ CHECK.MODENV.VALUE THEN
                M.CONTINUE = 0
                YMSG = "MODENV HAS VALUE [" : CHECK.MODENV.VALUE : "] TIPREG [" : YRECORD.TYPE : "] - SKIP"
                GOSUB LOG.ERROR
                Y.EX.FLAG = 1
                RETURN
            END
            M.CONTINUE = 1
            YMSG = "PROCESS MESSAGE MODENV [" : YR.MODENV.VALUE : "]"
            GOSUB LOG.ERROR
            Y.EX.FLAG = 1
            RETURN
        END
    END
    RETURN
*----------------------
MESSAGE.THREE.PROCESS:
*----------------------
!!check with record type 3 or 2 for EDST file
    CALL OCOMO('TEST YR.MODENV.TAG - YRECORD.TYPE = "3" OR (YR.FILE.TYPE = "EDST" AND YRECORD.TYPE = "2"')
    LOCATE YR.MODENV.TAG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
        YR.MODENV.VALUE = YR.MESSAGE.ARRAY<2,POS>
        YMSG =  "YR.MODENV.VALUE=" : YR.MODENV.VALUE
        CALL OCOMO(YMSG)
        LOCATE YR.MODENV.VALUE IN YR.MODENV.LIST<1,1> SETTING POS THEN
            M.CONTINUE = 1
        END
    END
    YMSG = "MODEENV [" : YR.MODENV.VALUE : "] TEST RESULT " : IFS( M.CONTINUE= 1," FOUND - CONTINUE"," NOT FOUND - SKIP")
    RETURN
*----------------
UPDATE.STATUS:
*----------------
!!write the details into atm log files
    IF POS.PL THEN
        IF RIGHT(YR.TRANS.KEY.ID,2) <> "PL" THEN
            YR.TRANS.KEY.ID := "PL"
        END
    END
    READ R.IB.ATM.MESSAGE.LOG.SB FROM F.IB.ATM.MESSAGE.LOG.SB, YR.TRANS.KEY.ID ELSE
        NULL
    END
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.STATUS> = "PROCESSED"
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.TIME.STAMP> = OCONV(DATE(),"D/E") : " " : OCONV(TIME(), "MTS")
    R.IB.ATM.MESSAGE.LOG.SB< IB.LOG.GLOBUS.FT.NO>= ID.NEW
    IF IN.MSG.TYPE[1,1] = 2 THEN
        REV.IND = "Y"
    END ELSE
        REV.IND = "N"
    END
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.REVERSAL.IND>= REV.IND
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.ACT.TIMESTAMP>= TIMEDATE()
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.OFS.COMPANY> = OFS.COMPANY
    WRITE R.IB.ATM.MESSAGE.LOG.SB TO F.IB.ATM.MESSAGE.LOG.SB, YR.TRANS.KEY.ID ON ERROR NULL
    CALL OCOMO("WRITING " : FN.IB.ATM.MESSAGE.LOG.SB : " [" : YR.TRANS.KEY.ID : "]")

    M.IB.CORR.FILE.SB.ID = YR.TRANS.KEY.ID
    READ R.IB.CORR.FILE.SB FROM F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID THEN
        M.IB.CORR.FILE.SB.HIST.ID = M.IB.CORR.FILE.SB.ID : ";" : R.IB.CORR.FILE.SB< IB.CORR.CURR.NO >
        WRITE R.IB.CORR.FILE.SB TO F.IB.CORR.FILE.SB.HIST, M.IB.CORR.FILE.SB.HIST.ID ON ERROR NULL
        DELETE F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID
    END
    RETURN
*-----------------
GET.REVERSAL.ID:
*-----------------
!!reversal transaction key checks
    YR.ORG.ID = ""
    REV.TRANS.KEY.ID = ""
    NO.IDS = DCOUNT(R.IB.PARAMETER.SB<IB.PARM.REV.MSG.KEY>,VM)
    FOR KK = 1 TO NO.IDS
        TAG.ID = TRIM(R.IB.PARAMETER.SB<IB.PARM.REV.MSG.KEY,KK>,  "0", "L")
        LOCATE TAG.ID IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
            REV.TRANS.KEY.ID := TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
        END
    NEXT KK
    M.CONTINUE = 0
    READ R.TEMP FROM  F.IB.ATM.MESSAGE.LOG.SB, REV.TRANS.KEY.ID THEN
        YR.ORG.ID =  R.TEMP<IB.LOG.GLOBUS.FT.NO>
        YMSG = "ORIGINAL TXN=" :  YR.ORG.ID
        GOSUB LOG.ERROR
        M.CONTINUE = 1
    END
    YMSG = "REVERSAL KEY [" : REV.TRANS.KEY.ID : "] FOUND ON IB.ATM.MESSAGE.LOG.SB ? " : IFS(M.CONTINUE=1,"YES","NO")
    GOSUB LOG.ERROR
    RETURN
*---------------------
POST.AC.LOCKED.EVENTS:
*---------------------
!!posting the transaction and updating the status
    CALL OCOMO("BEGIN AC.LOCKED REVERSAL")
    INMSG = ""
!!read the ac locked events and raise the transaction - Start
    R.LOCKED = ""
    Y.AC.LOCKED.EVENTS.ID = ""
    LOCATE BRANCH.CODE IN R.INTERCO.PARAMETER<ST.ICP.BRANCH.CODE,1> SETTING BR.CODE THEN
        COM.MNE = R.INTERCO.PARAMETER<ST.ICP.FIN.MNEMONIC,BR.CODE>
    END
    Y.AC.LOCKED.EVENTS.ID = "ACLK" : LOCK.FUND.BODY
! Check the record in login company
    FN.ACLK="F.AC.LOCKED.EVENTS"
    CALL OPF(FN.ACLK,F.ACLK)
    CALL F.READ(FN.ACLK,Y.AC.LOCKED.EVENTS.ID,R.LOCKED,F.ACLK,R.LOCKED.ERR)
    IF R.LOCKED EQ "" THEN
!If the record not available in current company then try with BRANCH.CODE
        FN.AC.LOCKED.EVENTS = "F":COM.MNE:".AC.LOCKED.EVENTS"
        CALL OPF(FN.AC.LOCKED.EVENTS,FV.AC.LOCKED.EVENTS)
        CALL F.READ(FN.AC.LOCKED.EVENTS,Y.AC.LOCKED.EVENTS.ID,R.LOCKED,FV.AC.LOCKED.EVENTS,R.LOCKED.ERR)
    END
    CALL OCOMO("CALLING IB.ATM.MSG.TEXT.IN")
    CALL IB.ATM.MSG.TEXT.IN ( INMSG )
    CALL OCOMO("RETURN-VALUE=" : INMSG)
    IF INMSG THEN
        REQUEST = INMSG
        RESPONSE = ""
        IF R.LOCKED THEN
!If locked record available call the reversal OFS processing
            HUSH ON
            CALL OFS.PROCESS.MANAGER(REQUEST,RESPONSE)
            HUSH OFF
        END ELSE
!If no locked record available then assign a dummy Error response without calling the OFS processing
            RESPONSE = Y.AC.LOCKED.EVENTS.ID:"//-1/NO,@ID:1:1=RECORD MISSING"
        END
!!read the ac locked events and raise the transaction - End
        CALL OCOMO("RESPONSE=" : RESPONSE)
        YMSG.LOG<1,-1> = "RESPONSE : " : RESPONSE
*        GOSUB WRITE.FILE.LOG
        ID.NEW = RESPONSE["/",1,1]
        YSTATUS = RESPONSE[",",1,1]["/",3,1]
        IF YSTATUS = 1 THEN
            GOSUB UPDATE.STATUS
        END ELSE
            GOSUB UPDATE.ERROR
        END
    END
    RETURN
*---------------
WRITE.FILE.LOG:
*---------------
!!write the log details in the work file
    IF YR.EDST.SUMM THEN
        RETURN
    END
    CALL OCOMO("WRITE-" : FIELD(YMSG.LOG,VM,2,DCOUNT(YMSG.LOG,VM)))
*    WRITESEQ YMSG.LOG APPEND TO F.OUTPUT ELSE NULL
    CALL F.READU(FN.IB.CLEARING.SB.MT.LOG,Y.FILE.NAME,R.IB.CLEARING.SB.MT.LOG,F.IB.CLEARING.SB.MT.LOG,ERR.IB.CLEARING.SB.MT.LOG,'')
    CALL  SB.REMOVE.WRONG.CHAR(YMSG.LOG)
    R.IB.CLEARING.SB.MT.LOG<IB.CLEARING.LOG.LOG.MSG,-1> = YMSG.LOG
    CALL F.WRITE(FN.IB.CLEARING.SB.MT.LOG,Y.FILE.NAME,R.IB.CLEARING.SB.MT.LOG)
    RETURN
*-----------
LOG.ERROR:
*-----------
!!write the log error in the como
    CALL OCOMO(YMSG)
    RETURN
**********************
EDST.REC.TYPE1.PROCESS:
**********************
!!posting the AC.LOCKED,EVENTS records
    IF YR.NRLOG[1,1] = "5" THEN
        LOCATE TAG.NRIDRESP  IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.NRIDRESP =  YR.MESSAGE.ARRAY<2,POS>
            YMSG = "NRIDRESP=" : YR.NRIDRESP
            GOSUB LOG.ERROR
            IF YR.NRIDRESP THEN
                BRANCH.CODE = YR.NRIDRESP[2,3]
                LOCK.FUND.BODY = YR.NRIDRESP[5,99]
                M.AC.LOCKED.EVENTS.ID = "ACLK" : LOCK.FUND.BODY : FM : BRANCH.CODE
                YMSG = "POSTING AC.LOCKED.EVENTS ID=" : M.AC.LOCKED.EVENTS.ID : " COMPANY [" : BRANCH.CODE : "] ONLY IF STATUS = 1 OTHERWISE SKIP"
                GOSUB LOG.ERROR
                GOSUB POST.AC.LOCKED.EVENTS
*            Linkar locked events com FT
*            20150105 - Dercio.Anselmo
                ALE.ID = "ACLK" : LOCK.FUND.BODY
                FT.ID = R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.GLOBUS.FT.NO>
                COMPANY.ID = BRANCH.CODE
*CALL SB.LINK.LOCKED.EVENT.FT(FT.ID,ALE.ID,COMPANY.ID)
            END
        END
    END
    RETURN
******************************
EORI.REC.TYPE2.PROCESS:
******************************
!!checks the amount if exists then do the process
    IF YR.AMT THEN
        LOCATE "178" IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            IF YR.MESSAGE.ARRAY<2,POS> THEN
                CALL OCOMO("TERMINAL ID=" : YR.MESSAGE.ARRAY<2,POS>)
            END ELSE
                YMSG.DISP= " NO TERMINAL ID FOUND - STOP PROCESSING"
                CALL OCOMO(YMSG.DISP)
                YMSG := YMSG.DISP
            END
            IF YR.MESSAGE.ARRAY<2,POS> THEN
                GOSUB CLEAN.TAGS
                GOSUB CHK.LOC.EORI.PROCESS
                YR.MESSAGE.ARRAY<2,POS> = YR.AMT
                EORI.TAG.330 = @TRUE
                CALL OCOMO("PROCESSING EORI TAG 330 MESSAGE")
                GOSUB PROCESS.MESSAGE
                EORI.TAG.330 = @FALSE
                CALL OCOMO("PROCESSING EORI TAG 330 MESSAGE EORI.TAG.330:":EORI.TAG.330)
            END
        END ELSE
            YMSG.DISP = "TAG 330 HAS AMOUNT OF [ " : YR.AMT : " BUT TAG-" : IB.TERMINAL.ID.TAG : " NOT FOUND. UNABLE TO CONTINUE"
            CALL OCOMO(YMSG.DISP)
            YMSG.ERR := YMSG.DISP
        END
    END ELSE
        YMSG.ERR := "AMOUNT ON TAG 330 IS NULL -SKIP"
    END
    RETURN
*------------------------
CHK.LOC.EORI.PROCESS:
*-----------------------
!!checks the value and assign to array variable
    LOCATE "8" IN YR.MESSAGE.ARRAY<1,1> SETTING POS ELSE
        YR.MESSAGE.ARRAY<1,POS> = 8
    END
    RETURN
*----------------------
CHK.ERMB.PROCESS.UPDATE:
*----------------------
!!checks the application with prarameterised record
    LOCATE "IN" IN R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.DIRECTION,1> SETTING DIR.POS  THEN
        NO.APPS = DCOUNT( R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.APPLICATION,DIR.POS> , SM)
        FOR AA = 1 TO NO.APPS
            IF APP.NAME EQ R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.APPLICATION,DIR.POS,AA> THEN
                GOSUB CHK.ERMB.SUB.PROCESS.UPDATE
            END
        NEXT AA
    END
    RETURN
*------------------------
CHK.ERMB.SUB.PROCESS.UPDATE:
*---------------------------
!!processing with the fetched data
    IF R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONVERSION,DIR.POS,AA> THEN
        YROUTINE = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONVERSION,DIR.POS,AA>[2,99]
        YR.RETURN = TAG.VALUE
        CALL @YROUTINE
        TAG.VALUE = YR.RETURN
        YMSG = "CALLING " : YROUTINE : " RETURN VALUE --> " :  YR.RETURN
        GOSUB LOG.ERROR
    END
    DATA.POS = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.FLD.POS,DIR.POS,AA>
    YFM = DATA.POS[",",1,1]
    YVM = DATA.POS[",",2,1]
    YSM = DATA.POS[",",3,1]
    BEGIN CASE
    CASE YFM AND YVM AND YSM
        R.RECORD<YFM, YVM, YSM> = TAG.VALUE
    CASE YFM AND YVM
        R.RECORD<YFM, YVM> = TAG.VALUE
    CASE YFM
        R.RECORD<YFM> = TAG.VALUE
    END CASE
    YMSG = "YFM=" : YFM : " YVM=" : YVM : " YSM=" : YSM
    GOSUB LOG.ERROR
    RETURN
END
