    SUBROUTINE IB.ATM.MSG.OUT( YMSGOUT )

    $INCLUDE I_COMMON
    $INCLUDE I_EQUATE
    $INCLUDE I_F.INTERCO.PARAMETER
    $INCLUDE I_F.ACCOUNT
    $INCLUDE I_F.CARD.ISSUE
    $INCLUDE I_F.COMPANY
    $INCLUDE I_F.FUNDS.TRANSFER
    $INCLUDE I_F.USER
    $INCLUDE IB.BP I_IB.ATM.MSG.COMMON
    $INCLUDE IB.BP I_IB.TAG.SB.COMMON
    $INCLUDE IB.BP I_F.IB.MSG.GRP.SB
    $INCLUDE IB.BP I_F.IB.ATM.BALANCE.SB
    $INCLUDE ATM.BP I_F.ATM.MAPPING.SB
    $INCLUDE ATM.BP I_F.ATM.CORR.MSG.SB

    EQU YES TO 1,
    NO TO 0,
    APPROVED TO 0,
    NOT.APPROVED.SERVICE.ERROR TO 1,
    NOT.APPOVED.OTHER TO 4,
    NOT.APPROVED.NO.FUNDS TO 5,
    NOT.APPOVED.APPL.ERROR TO 6

    IF INDEX(YMSGOUT,"SECURITY",1) THEN
        IF INDEX(YMSGOUT,"VIOLATION",1) THEN
            IF INDEX(YMSGOUT,"SIGN",1) THEN
                ETEXT = "PLEASE RUN OFS.USER.SB FOR ID " : OPERATOR
                GOSUB LOG.ERROR
            END
        END
    END

    YMSG = "IN.MSG=" : YMSGOUT
    GOSUB LOG.ERROR

    YMSG = "RETURN.DATA=" : RETURN.DATA
    GOSUB LOG.ERROR

    REPLY.MSG.TYPE = IN.MSG.TYPE + 100

    YR.PENDING.MODE = (REPLY.MSG.TYPE[1,1] EQ 3)

    MIN.RESPONSE.ID = "header.response"

    IF (RETURN.DATA[1,4] = REPLY.MSG.TYPE) THEN
        YMSGOUT = RETURN.DATA
        IF NOT(YR.ALREADY.PROCESSED) THEN
            GOSUB UPDATE.LOG.FILE
        END
        RETURN
    END

    IF INDEX(YMSGOUT,"BYPASS-CONFIRMED",1) THEN
        YMSGOUT = "ERROR - BYPASS"
        GOSUB CHECK.IF.RESPONSE.REQ
        IF YMSGOUT[1,4] = (IN.MSG.TYPE + 100) THEN
            RETURN
        END
        IF YMSGOUT = "ERROR-PENDING" THEN
            RETURN
        END
    END

    IF RETURN.DATA = "ERROR" THEN
        YMSGOUT = "ERROR-PROCESS"
        GOSUB CHECK.IF.RESPONSE.REQ
        RETURN
    END

    ID.NEW = YMSGOUT["/",1,1]
    YSTATUS = YMSGOUT[",",1,1]["/",3,1]

    IF APPLICATION EQ "FUNDS.TRANSFER" THEN
        IF R.NEW( FT.RECORD.STATUS ) EQ 'INAO' THEN
            IF IN.MSG.TYPE[1,1] = "3" THEN
                ETEXT = "RECORD LEFT IN INAO STATUS - ACTION AUTHORISE"
                GOSUB LOG.ERROR
                GOSUB UPDATE.CORR.FILE
            END ELSE
                YSTATUS = -1
                ETEXT = "RECORD IN INAO STATUS - SEND BACK FAIL"
                GOSUB LOG.ERROR
            END
        END
    END

    YMSG = "STATUS=" : YSTATUS : " ID.NEW=" : ID.NEW
    GOSUB LOG.ERROR
    M.IB.MSG.GRP.SB.ID = IN.MSG.TYPE + 100
    CALL CACHE.READ(FN.IB.MSG.GRP.SB,  M.IB.MSG.GRP.SB.ID, R.IB.MSG.GRP.SB, YERR)
    IF YERR THEN
        ETEXT = "RESPONSE MESSAGE NOT SET-UP FOR MESSAGE " : IN.MSG.TYPE : " --> " :  REPLY.MSG.TYPE
        GOSUB LOG.ERROR
        ETEXT = "HEADER RECORD SET AS RESPONSE"
        GOSUB LOG.ERROR
        R.IB.MSG.GRP.SB = MIN.RESPONSE.ID
    END

    YMSG = "CALLING IB.BUILD.RETURN.DATA FOR REPLY MESSAGE : " : M.IB.MSG.GRP.SB.ID

    GOSUB LOG.ERROR

    IF  REPLY.MSG.TYPE[1,1] = "1" AND YR.MESSAGE.EVENT="PIN.CHANGE" THEN
        YSTATUS = 1
    END

    BEGIN CASE
    CASE REPLY.MSG.TYPE[1,1] EQ "3" AND YSTATUS <> 1
        IF YR.PENDING.MODE THEN
            GOSUB UPDATE.CORR.FILE
        END
        YSTATUS = 1

    CASE REPLY.MSG.TYPE[1,1] EQ "2" AND YSTATUS <> 1
        GOSUB UPDATE.CORR.FILE
        YSTATUS = 1

    CASE OTHERWISE
        NULL

    END CASE

    IF YSTATUS = 1 THEN
        Y.SEND.ZERO.BAL = NO
        Y.CARD.STATUS = APPROVED
        CALL IB.ATM.PROCESS.BALANCE.SB
        CALL IB.BUILD.RETURN.DATA ( REPLY.MSG.TYPE )
    END ELSE
        IF NOT(YR.PENDING.MODE) THEN
            ID.NEW = ""
        END
        Y.CARD.STATUS = NOT.APPOVED.OTHER
        Y.SEND.ZERO.BAL = NO
        ETEXT = YMSG
        GOSUB LOG.ERROR
        CALL IB.ATM.PROCESS.BALANCE.SB
        Y.CARD.STATUS = NOT.APPOVED.OTHER
        CALL IB.BUILD.RETURN.DATA ( REPLY.MSG.TYPE )
        ID.NEW = ""
    END

    YMSG = "LOGGING RESPONSE FOR KEY " : YMSG.KEY
    GOSUB LOG.ERROR

    YMSGOUT =  REPLY.MSG.TYPE

    GOSUB UPDATE.LOG.FILE

    RETURN

UPDATE.LOG.FILE:

    YR.ACTION = "UPDATE"
    YR.RETURN = YMSGOUT
    CALL IB.MSG.LOGGER.SB( YR.ACTION, YR.RETURN)

    IF ID.NEW[1,4] = "ACLK" THEN
        OPEN "","TXN.STMT.UPDATE" TO F.ALERT.TRIGGER THEN
            ALERT.ID = ID.NEW : "/" : R.COMPANY(EB.COM.MNEMONIC)
            WRITE "" TO F.ALERT.TRIGGER, ALERT.ID
        END
    END

    RETURN

CHECK.IF.RESPONSE.REQ:

    JUST.GET.BALANCE = YES
    Y.SEND.ZERO.BAL = NO
    YR.DO.NOTHING = NO
    ID.NEW = ""

    BEGIN CASE

    CASE YR.ERROR.IN.APPLICATION EQ FAIL.DUE.TO.TECH.ERROR
        IF YR.PENDING.MODE THEN
            GOSUB UPDATE.CORR.FILE
            Y.CARD.STATUS = APPROVED
        END ELSE
            Y.CARD.STATUS = NOT.APPOVED.OTHER
        END

        Y.SEND.ZERO.BAL = NO

    CASE YR.ERROR.IN.APPLICATION EQ FAIL.NO.FUNDS
        Y.SEND.ZERO.BAL = YES
        Y.CARD.STATUS = NOT.APPROVED.NO.FUNDS

    CASE YR.ERROR.IN.APPLICATION EQ FAIL.REV.TXN.NOT.FOUND
        Y.SEND.ZERO.BAL = NO
        Y.CARD.STATUS = NOT.APPOVED.OTHER

    CASE YR.ERROR.IN.APPLICATION EQ FAIL.CARD.NOT.FOUND
        Y.SEND.ZERO.BAL = YES
        Y.CARD.STATUS = NOT.APPOVED.OTHER

    CASE YR.ERROR.IN.APPLICATION EQ FAIL.ACCT.NOT.FOUND
        Y.SEND.ZERO.BAL = YES
        Y.CARD.STATUS = NOT.APPOVED.OTHER

    CASE YR.ERROR.IN.APPLICATION EQ FAIL.TXN.IN.PENDING.MODE
        YMSGOUT = "ERROR-PENDING"
        YR.DO.NOTHING = YES

    CASE YR.ERROR.IN.APPLICATION EQ FAIL.CARD.ACCT.RESTRICT
        Y.SEND.ZERO.BAL = YES
        Y.CARD.STATUS = NOT.APPOVED.OTHER

    CASE OTHERWISE
        ETEXT = "YR.ERROR.IN.APPLICATION=" : YR.ERROR.IN.APPLICATION : " PLEASE CODE THIS ???"
        GOSUB LOG.ERROR

    END CASE

    Y.CARD.STATUS.SAVE = Y.CARD.STATUS

    IF NOT(YR.DO.NOTHING) THEN
        CALL CACHE.READ(FN.IB.MSG.GRP.SB,  REPLY.MSG.TYPE, R.IB.MSG.GRP.SB, YERR)
        IF YERR THEN
            ETEXT = "RESPONSE MESSAGE NOT SET-UP FOR MESSAGE " : IN.MSG.TYPE : " --> " :  REPLY.MSG.TYPE
            GOSUB LOG.ERROR
            ETEXT = "HEADER RECORD SET AS RESPONSE"
            GOSUB LOG.ERROR
            R.IB.MSG.GRP.SB = MIN.RESPONSE.ID
        END

        CALL IB.ATM.PROCESS.BALANCE.SB
        Y.CARD.STATUS = Y.CARD.STATUS.SAVE
        CALL IB.BUILD.RETURN.DATA ( REPLY.MSG.TYPE )
        IF ((IN.MSG.TYPE + 100) = REPLY.MSG.TYPE[1,4]) THEN
            YMSGOUT = REPLY.MSG.TYPE
            RETURN.DATA = REPLY.MSG.TYPE
        END
        GOSUB UPDATE.LOG.FILE
    END

    RETURN

UPDATE.CORR.FILE:

    IF YR.MESSAGE.EVENT="PIN.CHANGE" THEN RETURN

    M.ATM.CORR.MSG.SB.ID = "IB":YMSG.KEY

    R.ATM.CORR.MSG.SB=""
    IF ID.NEW THEN
        R.ATM.CORR.MSG.SB<ATM.CORR.TXN.REF> = ID.NEW
    END ELSE
        R.ATM.CORR.MSG.SB<ATM.CORR.TXN.REF> = M.ATM.CORR.MSG.SB.ID
    END
    YNO = DCOUNT(TXN.ERROR.TRACE,VM)
    FOR ZZ = 1 TO YNO
        YLINE = TXN.ERROR.TRACE<1,ZZ>
        LOCATE YLINE IN R.ATM.CORR.MSG.SB<ATM.CORR.PROCESS.ERR,1> SETTING POS ELSE
            R.ATM.CORR.MSG.SB<ATM.CORR.PROCESS.ERR,POS> = YLINE
        END
    NEXT ZZ


    OFS.ERROR = CHANGE(YMSGOUT,",",VM)
    R.ATM.CORR.MSG.SB<ATM.CORR.OFS.ERROR> = OFS.ERROR
    R.ATM.CORR.MSG.SB<ATM.CORR.RETRY> = ""
    YNO = DCOUNT(MSG.DATA<MSG.TAG.ID>,VM)
    FOR ZZ = 1 TO YNO
        YTAG = MSG.DATA<MSG.TAG.ID,ZZ>
        IF LEN(YTAG) < 3 THEN
            YTAG = FMT(YTAG, 'R%3')
        END
        R.ATM.CORR.MSG.SB<ATM.CORR.TAG,ZZ> = YTAG
        R.ATM.CORR.MSG.SB<ATM.CORR.VALUE,ZZ> = MSG.DATA<MSG.TAG.VALUE,ZZ>
    NEXT ZZ
    VER.NAME = R.ATM.MAPPING.SB<ATM.MAP.VERSION.NAME>
    R.ATM.CORR.MSG.SB<ATM.CORR.VERSION> = VER.NAME
    R.ATM.CORR.MSG.SB<ATM.CORR.OFS.COMPANY> = OFS.COMPANY
    TIME.STAMP = TIMEDATE()
    R.IB.CORR.FILE.SB<ATM.CORR.INPUTTER> = TNO:"_":OPERATOR
    R.ATM.CORR.MSG.SB<ATM.CORR.AUTHORISER> = TNO:"_":OPERATOR
    X = OCONV(DATE(),"D-")
    X = X[9,2]:X[1,2]:X[4,2]:TIME.STAMP[1,2]:TIME.STAMP[4,2]
    R.ATM.CORR.MSG.SB<ATM.CORR.DATE.TIME> = X
    R.ATM.CORR.MSG.SB<ATM.CORR.CO.CODE> = ID.COMPANY
    R.ATM.CORR.MSG.SB<ATM.CORR.DEPT.CODE>=R.USER<EB.USE.DEPARTMENT.CODE>

    ID.NEW = R.ATM.CORR.MSG.SB<ATM.CORR.TXN.REF>
    YR.CARD.STATUS = 0

    WRITE R.ATM.CORR.MSG.SB TO F.ATM.CORR.MSG.SB, M.ATM.CORR.MSG.SB.ID ON ERROR NULL

    ETEXT = "MANUAL ACTION REQUIRED --- " :FN.ATM.CORR.MSG.SB :"-": M.ATM.CORR.MSG.SB.ID : "----- "
    GOSUB LOG.ERROR

    RETURN


CHECK.LOG.FILE:

    YR.ACTION = "DELETE"
    CALL IB.MSG.LOGGER.SB(YR.ACTION, YR.RETURN)
    RETURN


LOG.ERROR:

    IF ETEXT THEN
        IB.LOG.LEVEL = "ERROR"
    END ELSE
        ETEXT = YMSG
    END
    CALL IB.ATM.LOG.ERROR( SYSTEM(40) )
    IB.LOG.LEVEL = "DEBUG"
    ETEXT = ""

    RETURN

END
