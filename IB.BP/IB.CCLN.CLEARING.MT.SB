*-----------------------------------------------------------------------------
* <Rating>2875</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE IB.CCLN.CLEARING.MT.SB ( R.IB.CLEARING.CONTROL.SB )

$INSERT ../T24_BP I_COMMON
$INSERT ../T24_BP I_EQUATE
$INSERT ../T24_BP I_GTS.COMMON
$INSERT ../T24_BP I_TSA.COMMON
$INSERT ../T24_BP I_F.TSA.STATUS
$INSERT ../T24_BP I_BATCH.FILES
$INSERT ../T24_BP I_F.TSA.SERVICE
$INSERT ../T24_BP I_F.USER
    $INCLUDE IB.BP I_IB.ATM.MSG.COMMON
    $INCLUDE IB.BP I_IB.TAG.SB.COMMON
    $INCLUDE IB.BP I_IB.ATM.CLEARING.COMMON
    $INCLUDE IB.BP I_F.IB.CORR.FILE.SB
    $INCLUDE IB.BP I_F.IB.ERMB.SB
    $INSERT I_F.IB.FILE.TAGS.SB
    $INSERT I_F.IB.MESSAGE.TAG.SB
    $INSERT I_F.IB.TAG.GRP.SB
    $INSERT I_F.IB.PARAMETER.SB
    $INSERT I_F.IB.EDST.SUMM.SB
    $INSERT IB.BP I_F.IB.FILE.PARAMETER.SB
    $INSERT IB.BP I_F.IB.ATM.POS.LINK.SB
    $INSERT IB.BP I_F.IB.ATM.MESSAGE.LOG.SB
    $INSERT IB.BP I_F.IB.CLEARING.CONTROL.SB

    EQU MSG.TAG.ID TO 1,
    MSG.TAG.VALUE TO 2

    Y1 = TIME()

    Y.SAVE.COMPANY = ID.COMPANY
    GOSUB PROCESS
    Y2 =  TIME()
    YR.ELAPSED = OCONV(Y2-Y1,"MTS")
    R.IB.CLEARING.CONTROL.SB<IB.CROL.TIME.STAMP> = TIMEDATE():" ": YR.ELAPSED
    CALL LOAD.COMPANY( Y.SAVE.COMPANY)
    YR.INTERFACE = ""

    RETURN

*-------
PROCESS:
*-------

    YR.PROCESS.ERROR = 0

    YLINE = R.IB.CLEARING.CONTROL.SB<IB.CROL.MESSAGE>
    YR.FILE.JULDATE = R.IB.CLEARING.CONTROL.SB<IB.CROL.JUL.DATE>
    YR.MESSAGE.ARRAY<MSG.TAG.ID> = R.IB.CLEARING.CONTROL.SB<IB.CROL.TAG>
    YR.MESSAGE.ARRAY<MSG.TAG.VALUE> = R.IB.CLEARING.CONTROL.SB<IB.CROL.DATA>
    YR.FILE.TYPE = ID.NEW[1,4]

    GOSUB CLEAN.TAGS

    YRECORD.TYPE = YLINE[1,1]

    BEGIN CASE

    CASE  YRECORD.TYPE = "0"  OR YRECORD.TYPE = "9"
        R.IB.CLEARING.CONTROL.SB<IB.CROL.STATUS> = 1
        R.IB.CLEARING.CONTROL.SB<IB.CROL.RESPONSE> = IFS(YRECORD.TYPE='0',"HEADER","FOOTER")

           CASE OTHERWISE


CLEAN.TAGS:

    NO.TAGS = DCOUNT(YR.MESSAGE.ARRAY<1>,VM)
    FOR J = 1 TO NO.TAGS
        YR.MESSAGE.ARRAY<1,J> = YR.MESSAGE.ARRAY<1,J> * 1
    NEXT J
    RETURN

LOG.MESSAGE:

    CALL OCOMO("LOG MESSAGE")
    IF YR.FILE.TYPE THEN
        IF YRECORD.TYPE <> "0" AND  YRECORD.TYPE <> "9" THEN
            YR.FILE.NAME = YR.FILE.TYPE
            CALL IB.MSG.LOG.RUN.SB(YR.FILE.NAME)
        END
    END

    RETURN

SET.BANK.CODE:

    LOCATE IB.BANK.ID.CODE.TAG IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS ELSE
        YR.MESSAGE.ARRAY<MSG.TAG.ID,POS> = IB.BANK.ID.CODE.TAG
    END
    YR.MESSAGE.ARRAY<2,POS> = TRIM(R.IB.PARAMETER.SB<IB.PARM.OWN.BANK.CODE>)

    RETURN

GET.TRANS.ID:

    BEGIN CASE
    CASE YR.EDST.SUMM
        YR.TRANS.KEY.ID = M.IB.EDST.SUMM.SB.ID

    CASE YR.FILE.TYPE = "EORI"
        YR.TRANS.KEY.ID = M.IB.EDST.SUMM.SB.ID

    CASE OTHERWISE

        YR.TRANS.KEY.ID = ""
        NO.IDS = DCOUNT(R.IB.PARAMETER.SB<IB.PARM.MSG.KEY>,VM)
        FOR KK = 1 TO NO.IDS
            TAG.ID = TRIM(R.IB.PARAMETER.SB<IB.PARM.MSG.KEY,KK>,  "0", "L")
            LOCATE TAG.ID IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
                YR.TRANS.KEY.ID := TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
            END
        NEXT KK
        YR.TRANS.KEY.ID = CHANGE(YR.TRANS.KEY.ID," ","")
    END CASE

    CALL OCOMO("YR.TRANS.KEY.ID=" : YR.TRANS.KEY.ID)

    RETURN

CHECK.TRANSACTION:

    CALL OCOMO("CHECKING TRANSACTION CONDITIONS - ALREADY PROCESSED")

    GOSUB GET.TRANS.ID

    YR.IS.DUPLICATE = 0

    IF POS.PL THEN
        YR.TRANS.KEY.ID := "PL"
    END

    IF EORI.TAG.330 THEN
        YR.TRANS.KEY.ID := ".330"
    END

    CALL F.READ(FN.IB.ATM.MESSAGE.LOG.SB, YR.TRANS.KEY.ID , R.IB.ATM.MESSAGE.LOG.SB, F.IB.ATM.MESSAGE.LOG.SB, YERR)
    YMSG = 'YR.TRANS.KEY.ID=' : YR.TRANS.KEY.ID
    CALL OCOMO( YMSG )
    IF R.IB.ATM.MESSAGE.LOG.SB THEN
        YR.IS.DUPLICATE = 1
        YMSG := " DUPLICATE"
    END ELSE
        YMSG := " NOT FOUND"
    END

    GOSUB LOG.ERROR

    RETURN


PROCESS.MESSAGE:

    CALL OCOMO("BEGIN - PROCESS.MESSAGE")

    GOSUB CHECK.TRANSACTION

    IF YR.IS.DUPLICATE THEN
        YMSG.LOG = YMSG
        GOSUB WRITE.FILE.LOG
        RETURN
    END

    GOSUB CHECK.PROCESS.RULES

    IF NOT(M.CONTINUE) THEN
        YMSG.LOG =  "RESPONSE : CONDITIONS NOT MET-" : YMSG
        GOSUB WRITE.FILE.LOG
        RETURN
    END

    INMSG = ""
    CALL OCOMO("CALLING IB.ATM.MSG.TEXT.IN")
    CALL IB.ATM.MSG.TEXT.IN ( INMSG )
    CALL OCOMO("RETURN-VALUE=" : INMSG)
    IF INMSG THEN
        NO.MSG = DCOUNT(INMSG,FM)
        FOR MM = 1 TO NO.MSG
            REQUEST = INMSG<MM>
            RESPONSE = ""
            HUSH ON
            CALL OFS.PROCESS.MANAGER(REQUEST,RESPONSE)
            HUSH OFF
            CALL OCOMO("RESPONSE=" : RESPONSE)
            YMSG.LOG = RESPONSE
            GOSUB WRITE.FILE.LOG
            ID.NEW = RESPONSE["/",1,1]
            YSTATUS = RESPONSE[",",1,1]["/",3,1]
            IF YSTATUS = 1 THEN
                GOSUB UPDATE.STATUS
            END ELSE
                YR.PROCESS.ERROR = 1
                GOSUB UPDATE.ERROR
                GOSUB WRITE.FILE.LOG
            END
        NEXT MM
    END ELSE
        YR.PROCESS.ERROR = 1
        YMSG.LOG = "IB.ATM.MSG.TEXT.IN RETURNED A NULL VALUE ( FAILED TO CREATE OFS MESSAGE )"
        GOSUB UPDATE.ERROR
        GOSUB WRITE.FILE.LOG
    END

    RETURN

READ.IB.FILE.TAGS.SB.FILE:

    CALL F.READ(FN.IB.FILE.TAGS.SB, M.IB.FILE.TAGS.SB.ID, R.IB.FILE.TAGS.SB, F.IB.FILE.TAGS.SB, "")
    RETURN


READ.IB.MESSAGE.TAG.SB.FILE:
    CALL F.READ(FN.IB.MESSAGE.TAG.SB, M.IB.MESSAGE.TAG.SB.ID, R.IB.MESSAGE.TAG.SB, F.IB.MESSAGE.TAG.SB, YERR)
    RETURN

READ.IB.TAG.GRP.SB.FILE:
    CALL F.READ(FN.IB.TAG.GRP.SB, M.IB.TAG.GRP.SB.ID, R.IB.TAG.GRP.SB, F.IB.TAG.GRP.SB, YERR)
    RETURN

UPDATE.ERROR:

    IF YR.EDST.SUMM THEN RETURN

    M.IB.CORR.FILE.SB.ID = YR.TRANS.KEY.ID
    READ R.IB.CORR.FILE.SB FROM  F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID ELSE YERR = "RECORD NOT FOUND"
    IF R.IB.CORR.FILE.SB THEN
        M.IB.CORR.FILE.SB.HIST.ID = M.IB.CORR.FILE.SB.ID : ";" : R.IB.CORR.FILE.SB< IB.CORR.CURR.NO >
        WRITE R.IB.CORR.FILE.SB TO F.IB.CORR.FILE.SB.HIST, M.IB.CORR.FILE.SB.HIST.ID ON ERROR NULL
    END
    R.IB.CORR.FILE.SB< IB.CORR.CURR.NO > += 1
    R.IB.CORR.FILE.SB<IB.CORR.TXN.REF> = YR.ARC.FILE
    OFS.ERROR = RESPONSE[",",2,99999]
    R.IB.CORR.FILE.SB<IB.CORR.OFS.ERROR> = CHANGE(OFS.ERROR,",",@VM)

    YNO = DCOUNT(YR.MESSAGE.ARRAY<1>,VM)
    FOR NN = 1 TO YNO
        IF LEN(YR.MESSAGE.ARRAY<1,NN>) < 3 THEN
            YR.MESSAGE.ARRAY<1,NN> = FMT(YR.MESSAGE.ARRAY<1,NN>,'R%3')
        END
    NEXT NN
    R.IB.CORR.FILE.SB<IB.CORR.TAG> = YR.MESSAGE.ARRAY<1>
    R.IB.CORR.FILE.SB<IB.CORR.VALUE> = YR.MESSAGE.ARRAY<2>
    TIME.STAMP = TIMEDATE()
    R.IB.CORR.FILE.SB<IB.CORR.INPUTTER> = TNO:"_":OPERATOR
    R.IB.CORR.FILE.SB<IB.CORR.AUTHORISER> = TNO:"_":OPERATOR
    X = OCONV(DATE(),"D-")
    X = X[9,2]:X[1,2]:X[4,2]:TIME.STAMP[1,2]:TIME.STAMP[4,2]
    R.IB.CORR.FILE.SB<IB.CORR.DATE.TIME> = X
    R.IB.CORR.FILE.SB<IB.CORR.CO.CODE> = ID.COMPANY
    R.IB.CORR.FILE.SB<IB.CORR.DEPT.CODE>=R.USER<EB.USE.DEPARTMENT.CODE>

    WRITE R.IB.CORR.FILE.SB TO F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID ON ERROR NULL
    CALL OCOMO( "WRITING ERROR FILE " : M.IB.CORR.FILE.SB.ID)
    RETURN

UPDATE.ERMB.FILE:

    IF YR.FILE.TYPE <> "ERMB" THEN RETURN

    R.RECORD = ""
    MSG.DATA = YR.MESSAGE.ARRAY
    APP.NAME = "IB.ERMB.SB"

    M.IB.ERMB.SB.ID = ""
    NO.TAGS = DCOUNT(MSG.DATA<MSG.TAG.ID>,VM)
    FOR TT = 1 TO NO.TAGS
        M.IB.MESSAGE.TAG.SB.ID = FMT(MSG.DATA<MSG.TAG.ID,TT>,'R%3')
        TAG.VALUE = ""
        CALL CACHE.READ(FN.IB.MESSAGE.TAG.SB, M.IB.MESSAGE.TAG.SB.ID, R.IB.MESSAGE.TAG.SB, YERR)
        TAG.VALUE = ""
        M.IB.MESSAGE.TAG.SB.ID *= 1
        LOCATE M.IB.MESSAGE.TAG.SB.ID IN MSG.DATA<MSG.TAG.ID,1> SETTING POS THEN
            TAG.VALUE = TRIM(MSG.DATA<MSG.TAG.VALUE,POS>)
        END

        Y.CALC.VALUE=""

        YMSG = "M.IB.MESSAGE.TAG.SB.ID=" : M.IB.MESSAGE.TAG.SB.ID : " VALUE=" : TAG.VALUE
        GOSUB LOG.ERROR

        LOCATE "IN" IN R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.DIRECTION,1> SETTING DIR.POS  THEN
            NO.APPS = DCOUNT( R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.APPLICATION,DIR.POS> , SM)
            FOR AA = 1 TO NO.APPS
                IF APP.NAME EQ R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.APPLICATION,DIR.POS,AA> THEN
                    IF R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONVERSION,DIR.POS,AA> THEN
                        YROUTINE = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONVERSION,DIR.POS,AA>[2,99]
                        YR.RETURN = TAG.VALUE
                        CALL @YROUTINE
                        TAG.VALUE = YR.RETURN
                        YMSG = "CALLING " : YROUTINE : " RETURN VALUE --> " :  YR.RETURN
                        GOSUB LOG.ERROR
                    END
                    DATA.POS = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.FLD.POS,DIR.POS,AA>
                    YFM = DATA.POS[",",1,1]
                    YVM = DATA.POS[",",2,1]
                    YSM = DATA.POS[",",3,1]
                    BEGIN CASE
                    CASE YFM AND YVM AND YSM
                        R.RECORD<YFM, YVM, YSM> = TAG.VALUE
                    CASE YFM AND YVM
                        R.RECORD<YFM, YVM> = TAG.VALUE
                    CASE YFM
                        R.RECORD<YFM> = TAG.VALUE
                    END CASE
                    YMSG = "YFM=" : YFM : " YVM=" : YVM : " YSM=" : YSM
                    GOSUB LOG.ERROR
                END
            NEXT AA
        END

    NEXT TT

    M.IB.ERMB.SB.ID = R.RECORD<IB.ERMB.FICH> : R.RECORD<IB.ERMB.IDFICH>

    TIME.STAMP = TIMEDATE()
    R.RECORD<IB.ERMB.CURR.NO> = 1
    R.RECORD<IB.ERMB.INPUTTER> = TNO:"_":OPERATOR
    R.RECORD<IB.ERMB.AUTHORISER> = TNO:"_":OPERATOR
    X = OCONV(DATE(),"D-")
    X = X[9,2]:X[1,2]:X[4,2]:TIME.STAMP[1,2]:TIME.STAMP[4,2]
    R.RECORD<IB.ERMB.DATE.TIME> = X
    R.RECORD<IB.ERMB.CO.CODE> = ID.COMPANY
    R.RECORD<IB.ERMB.DEPT.CODE>=R.USER<EB.USE.DEPARTMENT.CODE>
    WRITE R.RECORD TO F.IB.ERMB.SB, M.IB.ERMB.SB.ID ON ERROR NULL

    YMSG.LOG = FN.IB.ERMB.SB :" ID=" : M.IB.ERMB.SB.ID
    GOSUB WRITE.FILE.LOG

    RETURN

UPDATE.IB.EDST.SUMM.SB.FILE:

    GOSUB CLEAN.TAGS

    M.IB.EDST.SUMM.SB.ID = YR.FILE.JULDATE

    M.TAG.ID = ERMB.ID.TAGS

    YR.TERMINAL.ID = ""
    LOCATE M.TAG.ID IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
        YR.TERMINAL.ID = FMT(TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>),'R%10')
        M.IB.EDST.SUMM.SB.ID  := "." : YR.TERMINAL.ID
    END

    M.IB.EDST.SUMM.SB.ID := "." : YRECORD.TYPE

    YR.TAG.118.VALUE=""
    LOCATE "118" IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
        YR.TAG.118.VALUE = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
    END

    M.IB.EDST.SUMM.SB.ID  := "." : YR.TAG.118.VALUE

    CALL OCOMO("M.IB.EDST.SUMM.SB.ID=":M.IB.EDST.SUMM.SB.ID)

    READU R.IB.EDST.SUMM.SB FROM F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID ELSE
        R.IB.EDST.SUMM.SB  = ""
    END

    IF NOT(R.IB.EDST.SUMM.SB) THEN
        LAST.POS = 1
    END ELSE
        LAST.POS = DCOUNT(R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TXN.REF>,VM) + 1
    END

    GOSUB GET.TRANS.ID

    LOCATE YR.TRANS.KEY.ID IN R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TXN.REF,1> SETTING TRN.POS THEN
        YMSG.LOG = FN.IB.EDST.SUMM.SB : " FILE UPDATE SKIPPED TXN ALREADLY UPDATED " : YR.TRANS.KEY.ID
        GOSUB WRITE.FILE.LOG
    END ELSE
        R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TXN.REF,LAST.POS> =  YR.TRANS.KEY.ID
        TXN.AMT = ""
        LOCATE "8" IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
            TXN.AMT = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
            TXN.SIGN = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS+1>)
            IF TXN.SIGN = "C" THEN
                TXN.AMT *= -1
            END
        END

        YMSG = "YR.TERMINAL.ID=[" :  YR.TERMINAL.ID : "] TXN.AMT=[" : TXN.AMT : "]"
        CALL OCOMO(YMSG)
        IF TXN.AMT THEN
            R.IB.EDST.SUMM.SB<IB.EDST.SUMM.AMOUNT,LAST.POS> = TXN.AMT
            R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TOTAMT> = SUM(R.IB.EDST.SUMM.SB<IB.EDST.SUMM.AMOUNT>)
            YMSG = "WRITING F.IB.EDST.SUMM.SB>" : M.IB.EDST.SUMM.SB.ID
            CALL OCOMO(YMSG)
            WRITE R.IB.EDST.SUMM.SB TO F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID
        END

    END

    RELEASE F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID

    RETURN

CHECK.PROCESS.RULES:

    CALL OCOMO("CHECK-RULES WITH PARAMS [ YR.FILE.TYPE=" : YR.FILE.TYPE : " YRECORD.TYPE=": YRECORD.TYPE : " ]")
    M.CONTINUE = 0

    BEGIN CASE

    CASE YR.EDST.SUMM
        CALL OCOMO("YR.EDST.SUMM=" : YR.EDST.SUMM : " ALWAYS UPDATE")
        M.CONTINUE = 1
    CASE YR.FILE.TYPE = "CCLN"
        LOCATE "161.1" IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.RETURN = YR.MESSAGE.ARRAY<2,POS>
            CALL IB.TAG.161.SB
            IF YR.RETURN THEN
                M.CONTINUE = 1
            END
        END

    CASE YR.FILE.TYPE = "EORI" AND (YRECORD.TYPE = "2" OR YRECORD.TYPE = "1")
        M.CONTINUE = 1
        CALL OCOMO("FILE TYPE=EORI AND TIPREG=" : YRECORD.TYPE :" - SET UPDATE TO TRUE")

    CASE YRECORD.TYPE = "3"
        GOSUB MESSAGE.THREE.PROCESS

    CASE YR.FILE.TYPE = "EDST" AND YRECORD.TYPE = "1"
        M.CONTINUE = 1
        GOSUB MESSAGE.ONE.TWO.PROCESS

    CASE YR.FILE.TYPE = "EDST" AND YRECORD.TYPE = "2"
        M.CONTINUE = 1
        GOSUB MESSAGE.ONE.TWO.PROCESS

    CASE YRECORD.TYPE = "6"
        CALL OCOMO('YRECORD.TYPE = "6"')

        LOCATE YR.SISTPAG.TAG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.SISTPAG = YR.MESSAGE.ARRAY<2,POS>
            YMSG = "YR.SISTPAG=" : YR.SISTPAG
            CALL OCOMO(YMSG)
            IF YR.SISTPAG = "9" THEN
                M.CONTINUE = 1
            END
        END

    END CASE

    CALL OCOMO("RETURN M.CONTINUE=" : M.CONTINUE )

    RETURN

MESSAGE.ONE.TWO.PROCESS:

    YMSG = "TESTING VALUE OF TAG.CODRESP SEEKING [N] IS THIS REVERSAL"
    GOSUB LOG.ERROR

    LOCATE TAG.CODRESP IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
        CODRESP.VALUE = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
        IF CODRESP.VALUE  = "N" THEN
            GOSUB GET.REVERSAL.ID
            YMSG = "CODRESP VALUE [N] - DUPLICATE TEST ? " : IFS(M.CONTINUE=1,"ORG ENTRY POSTED","ORG ENTRY NOT FOUND - SKIP")
            RETURN
        END
    END

    YMSG = "TEST MODENV FOR VALUE <> " : CHECK.MODENV.VALUE
    GOSUB LOG.ERROR

    IF TEST.MODENV.REQ THEN
        LOCATE YR.MODENV.TAG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.MODENV.VALUE = YR.MESSAGE.ARRAY<2,POS>
            YMSG =  "YR.MODENV.VALUE=" : YR.MODENV.VALUE
            CALL OCOMO(YMSG)
            IF YR.MODENV.VALUE EQ CHECK.MODENV.VALUE THEN
                M.CONTINUE = 0
                YMSG = "MODENV HAS VALUE [" : CHECK.MODENV.VALUE : "] TIPREG [" : YRECORD.TYPE : "] - SKIP"
                GOSUB LOG.ERROR
                RETURN
            END
            M.CONTINUE = 1
            YMSG = "PROCESS MESSAGE MODENV [" : YR.MODENV.VALUE : "]"
            GOSUB LOG.ERROR
            RETURN
        END
    END

    YMSG = "STANDARD PROCESSING - CHECK MODENV FOR VALUES ON PARAMETER THIS RUN SETTINGS [" : MODENV.CHECKING : "]"
    GOSUB LOG.ERROR

    IF MODENV.CHECKING THEN
        LOCATE YR.MODENV.VALUE IN YR.MODENV.LIST<1,1> SETTING POS THEN
            M.CONTINUE = 1
            YMSG = "YR.MODENV.VALUE=" : YR.MODENV.VALUE  : " CONDITION MET"
        END ELSE
            YMSG = "YR.MODENV.VALUE=" : YR.MODENV.VALUE  : " CONDITION NOT MET - SKIP"
        END

        GOSUB LOG.ERROR
    END

    RETURN

MESSAGE.THREE.PROCESS:

    CALL OCOMO('TEST YR.MODENV.TAG - YRECORD.TYPE = "3" OR (YR.FILE.TYPE = "EDST" AND YRECORD.TYPE = "2"')
    LOCATE YR.MODENV.TAG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
        YR.MODENV.VALUE = YR.MESSAGE.ARRAY<2,POS>
        YMSG =  "YR.MODENV.VALUE=" : YR.MODENV.VALUE
        CALL OCOMO(YMSG)
        LOCATE YR.MODENV.VALUE IN YR.MODENV.LIST<1,1> SETTING POS THEN
            M.CONTINUE = 1
        END
    END

    YMSG = "MODEENV [" : YR.MODENV.VALUE : "] TEST RESULT " : IFS( M.CONTINUE= 1," FOUND - CONTINUE"," NOT FOUND - SKIP")

    RETURN

UPDATE.STATUS:

    IF POS.PL THEN
        IF RIGHT(YR.TRANS.KEY.ID,2) <> "PL" THEN
            YR.TRANS.KEY.ID := "PL"
        END
    END

    READ R.IB.ATM.MESSAGE.LOG.SB FROM F.IB.ATM.MESSAGE.LOG.SB, YR.TRANS.KEY.ID ELSE NULL

    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.STATUS> = "PROCESSED"
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.TIME.STAMP> = OCONV(DATE(),"D/E") : " " : OCONV(TIME(), "MTS")
    R.IB.ATM.MESSAGE.LOG.SB< IB.LOG.GLOBUS.FT.NO>= ID.NEW
    IF IN.MSG.TYPE[1,1] = 2 THEN
        REV.IND = "Y"
    END ELSE
        REV.IND = "N"
    END
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.REVERSAL.IND>= REV.IND
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.ACT.TIMESTAMP>= TIMEDATE()
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.OFS.COMPANY> = OFS.COMPANY
    WRITE R.IB.ATM.MESSAGE.LOG.SB TO F.IB.ATM.MESSAGE.LOG.SB, YR.TRANS.KEY.ID ON ERROR NULL
    CALL OCOMO("WRITING " : FN.IB.ATM.MESSAGE.LOG.SB : " [" : YR.TRANS.KEY.ID : "]")

    M.IB.CORR.FILE.SB.ID = YR.TRANS.KEY.ID
    READ R.IB.CORR.FILE.SB FROM F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID THEN
        M.IB.CORR.FILE.SB.HIST.ID = M.IB.CORR.FILE.SB.ID : ";" : R.IB.CORR.FILE.SB< IB.CORR.CURR.NO >
        WRITE R.IB.CORR.FILE.SB TO F.IB.CORR.FILE.SB.HIST, M.IB.CORR.FILE.SB.HIST.ID ON ERROR NULL
        DELETE F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID
    END

    RETURN

GET.REVERSAL.ID:

    YR.ORG.ID = ""
    REV.TRANS.KEY.ID = ""
    NO.IDS = DCOUNT(R.IB.PARAMETER.SB<IB.PARM.REV.MSG.KEY>,VM)
    FOR KK = 1 TO NO.IDS
        TAG.ID = TRIM(R.IB.PARAMETER.SB<IB.PARM.REV.MSG.KEY,KK>,  "0", "L")
        LOCATE TAG.ID IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
            REV.TRANS.KEY.ID := TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
        END
    NEXT KK
    M.CONTINUE = 0
    READ R.TEMP FROM  F.IB.ATM.MESSAGE.LOG.SB, REV.TRANS.KEY.ID THEN
        YR.ORG.ID =  R.TEMP<IB.LOG.GLOBUS.FT.NO>
        YMSG = "ORIGINAL TXN=" :  YR.ORG.ID
        GOSUB LOG.ERROR
        M.CONTINUE = 1
    END

    YMSG = "REVERSAL KEY [" : REV.TRANS.KEY.ID : "] FOUND ON IB.ATM.MESSAGE.LOG.SB ? " : IFS(M.CONTINUE=1,"YES","NO")
    GOSUB LOG.ERROR

    RETURN

POST.AC.LOCKED.EVENTS:

    CALL OCOMO("BEGIN AC.LOCKED REVERSAL")
    INMSG = ""
    CALL OCOMO("CALLING IB.ATM.MSG.TEXT.IN")
    CALL IB.ATM.MSG.TEXT.IN ( INMSG )
    CALL OCOMO("RETURN-VALUE=" : INMSG)
    IF INMSG THEN
        REQUEST = INMSG
        RESPONSE = ""
        HUSH ON
        CALL OFS.PROCESS.MANAGER(REQUEST,RESPONSE)
        HUSH OFF
        CALL OCOMO("RESPONSE=" : RESPONSE)
        YMSG.LOG = "RESPONSE : " : RESPONSE
        GOSUB WRITE.FILE.LOG
        ID.NEW = RESPONSE["/",1,1]
        YSTATUS = RESPONSE[",",1,1]["/",3,1]
        IF YSTATUS = 1 THEN
            GOSUB UPDATE.STATUS
        END ELSE
            GOSUB UPDATE.ERROR
            YR.PROCESS.ERROR = 1
        END
    END
    RETURN

WRITE.FILE.LOG:

    IF TXN.ERROR.TRACE THEN
        YMSG.ERR := VM : TXN.ERROR.TRACE
        TXN.ERROR.TRACE = ""
    END
    IF YR.PROCESS.ERROR THEN
        R.IB.CLEARING.CONTROL.SB<IB.CROL.STATUS> = 2
    END ELSE
        R.IB.CLEARING.CONTROL.SB<IB.CROL.STATUS> = 1
    END
    R.IB.CLEARING.CONTROL.SB<IB.CROL.RESPONSE> =  YMSG.LOG
    R.IB.CLEARING.CONTROL.SB<IB.CROL.ERROR> =  YMSG.ERR

    TXN.ERROR.TRACE = ''

    RETURN

LOG.ERROR:

    CALL OCOMO(YMSG)

    RETURN

END
