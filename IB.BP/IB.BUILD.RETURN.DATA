    SUBROUTINE IB.BUILD.RETURN.DATA ( Y.MESSAGE.TYPE)

    $INCLUDE I_COMMON
    $INCLUDE I_EQUATE
    $INCLUDE I_F.INTERCO.PARAMETER
    $INCLUDE I_F.ACCOUNT
    $INCLUDE I_F.CARD.ISSUE
    $INCLUDE IB.BP I_IB.ATM.MSG.COMMON
    $INCLUDE IB.BP I_IB.TAG.SB.COMMON
    $INCLUDE IB.BP I_F.IB.MSG.GRP.SB
    $INCLUDE IB.BP I_F.IB.TAG.GRP.SB
    $INCLUDE IB.BP I_F.IB.MESSAGE.TAG.SB
    $INCLUDE IB.BP I_F.IB.PARAMETER.SB
    $INCLUDE ATM.BP I_F.ATM.MAPPING.SB

    YR.OUT = ""
    VAR.DATA = ""
    GOSUB INITIALISE
    GOSUB PROCESS


    IF R.IB.PARAMETER.SB<IB.PARM.XML.RESPONSE > = "YES" THEN
        Y.MESSAGE.TYPE = DYNTOXML(RETURN.DATA,XSLT24,RESULT)
    END ELSE
        Y.MESSAGE.TYPE = YR.OUT
    END

    YMSG ="Y.MESSAGE.TYPE=" :  Y.MESSAGE.TYPE
    GOSUB LOG.ERROR

    YMSG = "ALL DONE"

    GOSUB LOG.ERROR

    RETURN

PROCESS:

    YCNT = 0
    VAR.DATA.LEN = 0
    GRP.NO = DCOUNT(R.IB.MSG.GRP.SB<IB.MSG.GRP.TAG.GRP.REF>,VM)
    FOR GG = 1 TO GRP.NO
        Y.VARIABLE.DATA = 0
        M.IB.TAG.GRP.SB.ID = R.IB.MSG.GRP.SB<IB.MSG.GRP.TAG.GRP.REF,GG>
        YMSG = "PROCESS GROUP ID=" : M.IB.TAG.GRP.SB.ID
        GOSUB LOG.ERROR
        CALL CACHE.READ(FN.IB.TAG.GRP.SB, M.IB.TAG.GRP.SB.ID, R.IB.TAG.GRP.SB, YERR)
        NO.TAGS = DCOUNT(R.IB.TAG.GRP.SB<IB.TAG.GRP.TAG.REFERENCE>,VM)
        FOR TT = 1 TO NO.TAGS
            M.IB.MESSAGE.TAG.SB.ID = R.IB.TAG.GRP.SB<IB.TAG.GRP.TAG.REFERENCE,TT>
            LOCATE M.IB.MESSAGE.TAG.SB.ID IN IB.BAL.VARIABLE.DATA.TAG<1,1> SETTING POS THEN
                GOSUB PROCESS.VARIABLE.DATA
                Y.VARIABLE.DATA = 1
                CONTINUE
            END
            GOSUB PROCESS.SINGLE.TAG
        NEXT TT
    NEXT GG

    YMSG = "YR.OUT=" : YR.OUT
    GOSUB LOG.ERROR
    YMSG = "RETURN.DATA=" : RETURN.DATA
    GOSUB LOG.ERROR

    RETURN


PROCESS.SINGLE.TAG:

    YERR=""
    CALL CACHE.READ(FN.IB.MESSAGE.TAG.SB, M.IB.MESSAGE.TAG.SB.ID, R.IB.MESSAGE.TAG.SB, YERR)
    BEGIN.REPEAT =  (R.IB.TAG.GRP.SB<IB.TAG.GRP.TAG.BEGIN.REPEAT,TT> = "Y" )
    IF  BEGIN.REPEAT THEN
        GOSUB PROCESS.TAG
        NO.VAR = DCOUNT(Y.CALC.VALUE<1>, @VM)
        FOR AV = 1 TO NO.VAR
            GOSUB PROCESS.REPEAT.DATA
        NEXT AV
        TT += NO.OF.LOOPS
    END ELSE
        GOSUB PROCESS.TAG
        GOSUB FMT.VALUE
        Y.ADD = 0
        IF LEN(Y.CALC.VALUE) >= 1 THEN
            YCNT + = 1
            YR.OUT := Y.CALC.VALUE
            RETURN.DATA<YCNT> = M.IB.MESSAGE.TAG.SB.ID[".",1,1] : VM : Y.CALC.VALUE
            Y.ADD = 1
            IF Y.VARIABLE.DATA AND M.IB.MESSAGE.TAG.SB.ID <> IB.BAL.VARIABLE.DATA.TAG THEN
                VAR.DATA.LEN += LEN(OUT.VAL)
                VAR.DATA := OUT.VAL
            END
        END
        GOSUB FMT.VALUE
        YMSG = Y.ADD : " TAG=" : M.IB.MESSAGE.TAG.SB.ID : " VALUE=" : Y.CALC.VALUE
        GOSUB LOG.ERROR
    END

    RETURN

PROCESS.VARIABLE.DATA:

    M.IB.TAG.GRP.SB.ID = YR.MESSAGE.CODE : "." : FMT(M.IB.MESSAGE.TAG.SB.ID,'R%3') : "." : IN.MESSAGE.CODE
    YMSG = "VARIABLE DATA.ID : M.IB.TAG.GRP.SB.ID=" : M.IB.TAG.GRP.SB.ID
    GOSUB LOG.ERROR
    YERR = ""
    CALL CACHE.READ(FN.IB.TAG.GRP.SB, M.IB.TAG.GRP.SB.ID, R.IB.TAG.GRP.SB, YERR)
    NO.TAGS = DCOUNT(R.IB.TAG.GRP.SB<IB.TAG.GRP.TAG.REFERENCE>,VM)
    IF R.IB.TAG.GRP.SB THEN
        FOR VTT = 1 TO NO.TAGS
            M.IB.MESSAGE.TAG.SB.ID = R.IB.TAG.GRP.SB<IB.TAG.GRP.TAG.REFERENCE,VTT>
            GOSUB PROCESS.SINGLE.TAG
        NEXT VTT
    END ELSE
        YCALC.VALUE = "0"
        GOSUB PROCESS.SINGLE.TAG
    END

    RETURN

TEST.TAG.NULL.VALUE:

    CALL CACHE.READ(FN.IB.MESSAGE.TAG.SB, M.IB.MESSAGE.TAG.SB.ID, R.IB.MESSAGE.TAG.SB, YERR)
    GOSUB PROCESS.TAG
    GOSUB FMT.VALUE
    YMSG = M.IB.MESSAGE.TAG.SB.ID : " RETURN VALUE =" : Y.CALC.VALUE
    GOSUB LOG.ERROR
    IF NOT(Y.CALC.VALUE) THEN
        YCNT + = 1
        Y.CALC.VALUE = "0"
        GOSUB FMT.VALUE
        YMSG = "TAG=" : M.IB.MESSAGE.TAG.SB.ID : " VALUE=" : Y.CALC.VALUE
        GOSUB LOG.ERROR
        RETURN.DATA<YCNT> = IB.BAL.VARIABLE.DATA.TAG : VM : Y.CALC.VALUE
        YR.OUT := Y.CALC.VALUE
        M.IB.TAG.GRP.SB.ID = ""
    END
    RETURN

PROCESS.REPEAT.DATA:

    M.IB.MESSAGE.TAG.SB.ID = R.IB.TAG.GRP.SB<IB.TAG.GRP.TAG.REFERENCE, TT>
    CALL CACHE.READ(FN.IB.MESSAGE.TAG.SB, M.IB.MESSAGE.TAG.SB.ID, R.IB.MESSAGE.TAG.SB, YERR)
    NO.OF.LOOPS = 1
    LOOP
    WHILE R.IB.MESSAGE.TAG.SB DO
        GOSUB PROCESS.TAG
        Y.CALC.VALUE = Y.CALC.VALUE<1,AV>
        GOSUB FMT.VALUE
        YCNT + = 1
        YMSG = "2 TAG=" : M.IB.MESSAGE.TAG.SB.ID : " VALUE=" : Y.CALC.VALUE
        GOSUB LOG.ERROR
        RETURN.DATA<YCNT> = M.IB.MESSAGE.TAG.SB.ID[".",1,1] : VM : Y.CALC.VALUE
        YR.OUT := Y.CALC.VALUE
        IF Y.VARIABLE.DATA AND M.IB.MESSAGE.TAG.SB.ID <> IB.BAL.VARIABLE.DATA.TAG THEN
            VAR.DATA.LEN += LEN(OUT.VAL)
            VAR.DATA := OUT.VAL
        END
        YPOS =  TT +  NO.OF.LOOPS
        M.IB.MESSAGE.TAG.SB.ID = R.IB.TAG.GRP.SB<IB.TAG.GRP.TAG.REFERENCE, YPOS>
        CALL CACHE.READ(FN.IB.MESSAGE.TAG.SB, M.IB.MESSAGE.TAG.SB.ID, R.IB.MESSAGE.TAG.SB, YERR)
        IF R.IB.TAG.GRP.SB<IB.TAG.GRP.TAG.BEGIN.REPEAT, YPOS> = "Y" THEN
            R.IB.TAG.GRP.SB = ""
        END ELSE
            NO.OF.LOOPS += 1
        END
    REPEAT

    RETURN

FMT.VALUE:

    TEMP.VALUES =  Y.CALC.VALUE
    Y.CALC.VALUE = ""
    IN.VAL =  TEMP.VALUES
    Y2 = ""
    OUT.VAL = ""
    YTYPE = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.TYPE>
    YLEN = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.LENGHT>
    BEGIN CASE
    CASE YTYPE = "N" AND YLEN
        YLEN *= 1
        YFMT = "R%" : YLEN
    CASE YTYPE = "A" AND YLEN
        YLEN *= 1
        YFMT = YLEN : 'R'
    CASE OTHERWISE
        OUT.VAL = IN.VAL
    END CASE

    IF YFMT THEN
        OUT.VAL = IN.VAL
        OUT.VAL = FMT(IN.VAL,YFMT)
        OUT.VAL = OUT.VAL[1,YLEN]
    END
    Y.CALC.VALUE = OUT.VAL


    RETURN

GET.FIRST.VALUE:

    M.IB.MESSAGE.TAG.SB.ID = YR.START.VARIABLE.DATA
    IF M.IB.MESSAGE.TAG.SB.ID THEN
        CALL CACHE.READ(FN.IB.MESSAGE.TAG.SB, M.IB.MESSAGE.TAG.SB.ID, R.IB.MESSAGE.TAG.SB, YERR)
        GOSUB PROCESS.TAG
    END

    RETURN

PROCESS.TAG:

    YTYPE = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.TYPE>
    Y.CALC.VALUE=""

    LOCATE "OUT" IN R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.DIRECTION,1> SETTING DIR.POS  THEN

        LOCATE YR.APPILICATION IN R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.APPLICATION,DIR.POS,1> SETTING APP.POS ELSE
            NO.APPS = DCOUNT(R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.APPLICATION,DIR.POS>, SM )
            IF NOT(NO.APPS) THEN
                NO.APPS = DCOUNT(R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONSTANT.VALUE,DIR.POS>, SM )
            END
            FOR LL = 1 TO NO.APPS
                IF R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.APPLICATION,DIR.POS,LL> = "" OR R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.APPLICATION,DIR.POS,LL> = "IB.ATM.BALANCE.SB" THEN
                    APP.POS = LL
                    EXIT
                END
            NEXT LL
        END

        READ.APPLICATION = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.APPLICATION,DIR.POS,LL>

        YCONT.VALUE = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONSTANT.VALUE,DIR.POS,APP.POS>

        IF LEN(YCONT.VALUE) GE 1  THEN
            GOSUB EXTRACT.CONT.VALUE
            RETURN
        END

        DATA.POS = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.FLD.POS,DIR.POS,APP.POS>
        PART1 =  DATA.POS[",",1,1]
        PART2 =  DATA.POS[",",2,1]
        PART3 =  DATA.POS[",",3,1]

        IF R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONVERSION,DIR.POS,APP.POS> THEN
            YROUTINE = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONVERSION,DIR.POS,APP.POS>[2,999]
            YR.RETURN = ""
            CALL @YROUTINE
            Y.CALC.VALUE = YR.RETURN
        END ELSE
            BEGIN CASE
            CASE READ.APPLICATION = "IB.ATM.BALANCE.SB"
                R.RECORD = R.IB.ATM.BALANCE.SB
                GOSUB READ.VALUE
            CASE READ.APPLICATION = "FUNDS.TRANSFER"
                R.RECORD = R.FUNDS.TRANSFER
                GOSUB READ.VALUE
            CASE OTHERWISE
                GOSUB READ.VALUE
            END CASE
        END
    END

    IF NOT(Y.CALC.VALUE) THEN
        IF YTYPE = "N" THEN
            Y.CALC.VALUE = "0"
        END ELSE
            Y.CALC.VALUE = SPACE(1)
        END
    END

    RETURN


READ.VALUE:

    IF PART1 AND PART2 AND PART3 THEN
        Y.CALC.VALUE = R.RECORD<PART1,PART2,PART3 >
    END ELSE
        IF PART1 AND PART2 THEN
            Y.CALC.VALUE = R.RECORD<PART1,PART2>
        END ELSE
            Y.CALC.VALUE = R.RECORD<PART1>
        END
    END

    RETURN

EXTRACT.CONT.VALUE:

    IF YCONT.VALUE[1,1] <> "!" THEN
        Y.CALC.VALUE = YCONT.VALUE
        RETURN
    END

    M.IB.MESSAGE.TAG.SB.ID = TRIM( M.IB.MESSAGE.TAG.SB.ID, "0", "L")

    BEGIN CASE
    CASE YCONT.VALUE = "!IN.MESSAGE"

        LOCATE M.IB.MESSAGE.TAG.SB.ID IN MSG.DATA<MSG.TAG.ID,1> SETTING POS THEN
            Y.CALC.VALUE = MSG.DATA<MSG.TAG.VALUE,POS>
        END

    CASE YCONT.VALUE = "!MESSAGE.TYPE"
        Y.CALC.VALUE = Y.MESSAGE.TYPE

    CASE YCONT.VALUE = "!MESSAGE.STATUS"
        Y.CALC.VALUE = Y.CARD.STATUS

    CASE YCONT.VALUE = "!MESSAGE.EVENT"

        Y.CALC.VALUE = R.ATM.MAPPING.SB<ATM.MAP.NRIDRESP>

        NO.PARTS = DCOUNT(Y.CALC.VALUE,":")
        YR.RETURN = ""
        FOR PP = 1 TO NO.PARTS
            YPART.ID = Y.CALC.VALUE[":",PP,1]
            BEGIN CASE
            CASE YPART.ID = "BR.CODE"
                YR.RETURN := ID.COMPANY[4]
            CASE YPART.ID[1,6] = "ID.NEW"
                IF ID.NEW THEN
                    Y1 = YPART.ID[",",2,1]
                    Y2 = YPART.ID[",",3,1]
                    IF Y1 AND Y2 THEN
                        YR.RETURN := ID.NEW[Y1,Y2]
                    END ELSE
                        IF Y1 THEN
                            YR.RETURN := ID.NEW[Y1]
                        END ELSE
                            YR.RETURN := ID.NEW
                        END
                    END
                END ELSE
                    Y.CALC.VALUE = ""
                END
            CASE OTHERWISE
                YR.RETURN = Y.CALC.VALUE

            END CASE

        NEXT PP
        Y.CALC.VALUE = YR.RETURN
        IF NOT(LEN(Y.CALC.VALUE)) THEN
            Y.CALC.VALUE = CHANGE(YR.MESSAGE.EVENT,".","")
        END

    CASE YCONT.VALUE = "!TODAY"
        Y.CALC.VALUE = TODAY

    CASE OTHERWISE
        Y.CALC.VALUE = YCONT.VALUE
    END CASE

    RETURN

LOG.ERROR:

    IF ETEXT THEN
        IB.LOG.LEVEL = "ERROR"
    END ELSE
        ETEXT = YMSG
    END
    CALL IB.ATM.LOG.ERROR( SYSTEM(40) )
    IB.LOG.LEVEL = "DEBUG"
    ETEXT = ""

    RETURN

INITIALISE:

    YMSG = "BEGIN RETURN DATA"
    GOSUB LOG.ERROR
    IS.LINKED.ACCT = 1
    Y.CONTINUE = 1
    YR.APPILICATION =R.ATM.MAPPING.SB<ATM.MAP.APPLICATION>

    YMSG = "YR.APPLICATION=" : YR.APPILICATION
    GOSUB LOG.ERROR

    RETURN

END
