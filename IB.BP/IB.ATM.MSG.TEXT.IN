*-----------------------------------------------------------------------------
* <Rating>1480</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE IB.ATM.MSG.TEXT.IN ( INMSG )

    $INCLUDE I_COMMON
    $INCLUDE I_EQUATE
    $INCLUDE I_F.INTERCO.PARAMETER
    $INCLUDE I_F.ACCOUNT
    $INCLUDE I_F.USER
    $INCLUDE IB.BP I_IB.ATM.MSG.COMMON
    $INCLUDE IB.BP I_IB.TAG.SB.COMMON
    $INCLUDE IB.BP I_F.IB.MSG.GRP.SB
    $INCLUDE OFS.BP I_F.OFS.USER.SB
    $INCLUDE IB.BP I_F.IB.OFS.USER.SB
    $INCLUDE IB.BP I_F.ATM.MAPPING.SB

    M.CONTINUE = 1

    GOSUB INITIALISE

    GOSUB PROCESS

    RETURN

PROCESS:

    IF NOT(M.CONTINUE) THEN RETURN

    IF IN.PROCESS.ERROR THEN RETURN

    IF RETURN.DATA THEN RETURN

    IF INMSG = "BYPASS" THEN
        GOSUB SET.BYPASS.ENQ
        RETURN
    END

    IN.MSG.TYPE = ""
    LOCATE YR.MESSAGE.TYPE IN MSG.DATA<MSG.TAG.ID,1> SETTING POS THEN
        IN.MSG.TYPE = MSG.DATA<MSG.TAG.VALUE,POS>
    END

    IF NOT(IN.MSG.TYPE) THEN
        ETEXT = "MESSAGE TYPE NOT FOUND @ TAG " :  YR.MESSAGE.TYPE
        GOSUB LOG.ERROR
        IN.MSG.TYPE = INMSG[1,4]
        Y.CARD.STATUS = 6
        YR.ERROR.IN.APPLICATION = FAIL.DUE.TO.TECH.ERROR
        GOSUB SET.BYPASS.ENQ
        RETURN
    END

    YMSG = "IN.MSG.TYPE=" : IN.MSG.TYPE
    GOSUB LOG.ERROR

    IN.MESSAGE.CODE = ""
    LOCATE YR.MESSAGE.CODE IN MSG.DATA<MSG.TAG.ID,1> SETTING POS THEN
        IN.MESSAGE.CODE =  MSG.DATA<MSG.TAG.VALUE,POS>
    END

    IF NOT(IN.MESSAGE.CODE) THEN
        ETEXT = "MESSAGE CODE NOT FOUND @ TAG " : YR.MESSAGE.CODE
        GOSUB LOG.ERROR
        Y.CARD.STATUS = 6
        YR.ERROR.IN.APPLICATION = FAIL.DUE.TO.TECH.ERROR
        GOSUB SET.BYPASS.ENQ
        RETURN
    END

    YMSG = "IN.MESSAGE.CODE=" : IN.MESSAGE.CODE
    GOSUB LOG.ERROR

    CALL CACHE.READ(FN.IB.MSG.GRP.SB, IN.MSG.TYPE, R.IB.MSG.GRP.SB, YERR)
    IF YERR THEN
        ETEXT = FN.IB.MSG.GRP.SB : " RECORD " : IN.MSG.TYPE : " NOT FOUND"
        GOSUB LOG.ERROR
        Y.CARD.STATUS = 6
        YR.ERROR.IN.APPLICATION = FAIL.DUE.TO.TECH.ERROR
        GOSUB SET.BYPASS.ENQ
        RETURN
    END

    M.VERSION.NO = "00"

    IF YR.VER.ID THEN
        M.VERSION.NO = YR.VER.ID
    END

    YERR = ""
    M.ATM.MAPPING.SB.ID = M.ATM.INTERFACE.SB.ID : "." : IN.MSG.TYPE : "." : IN.MESSAGE.CODE : "." : M.VERSION.NO

    CALL CACHE.READ(FN.ATM.MAPPING.SB, M.ATM.MAPPING.SB.ID, R.ATM.MAPPING.SB, YERR)
    IF YERR THEN
        ETEXT = FN.ATM.MAPPING.SB : " RECORD " : M.ATM.MAPPING.SB.ID : " NOT FOUND"
        GOSUB LOG.ERROR
        Y.CARD.STATUS = 6
        YR.ERROR.IN.APPLICATION = FAIL.DUE.TO.TECH.ERROR
        GOSUB SET.BYPASS.ENQ
        RETURN
    END

    YR.MESSAGE.EVENT = R.ATM.MAPPING.SB<ATM.MAP.CALL.TYPE>
    YR.APPLICATION = R.ATM.MAPPING.SB<ATM.MAP.APPLICATION>
    YR.EVENT.PROCESS = R.ATM.MAPPING.SB<ATM.MAP.EVENT.PROCESS>

    YMSG = "YR.MESSAGE.EVENT=" : YR.MESSAGE.EVENT : " YR.APPLICATION=" : YR.APPLICATION : " YR.EVENT.PROCESS=" : YR.EVENT.PROCESS
    GOSUB LOG.ERROR
    IF NOT(YR.MESSAGE.EVENT) THEN
        ETEXT = "EVENT NOT DEFINED ON RECORD " : FN.ATM.MAPPING.SB : " ID=" : IN.MESSAGE.CODE
        GOSUB LOG.ERROR
        GOSUB SET.BYPASS.ENQ
        Y.CARD.STATUS = 5
        RETURN
    END

    YMSG =  "EVENT=" :  YR.MESSAGE.EVENT : " FOR MESSAGE.TYPE " : IN.MSG.TYPE
    GOSUB LOG.ERROR

    JUST.GET.BALANCE = @FALSE

    YR.OFS.CALLED = @FALSE

    BEGIN CASE

    CASE IN.MSG.TYPE[1,1] <> "1"
        Y.SEND.ZERO.BAL =0
        YMSG = "IN " : IFS(IN.MSG.TYPE[1,1]="2","REVERSAL","PENDING") :"  MODE"
        GOSUB LOG.ERROR
        CALL IB.PROCESS.ACCT.BAL.SB
        CALL IB.ATM.OFS.SB(INMSG)
        YR.OFS.CALLED = @TRUE

    CASE IN.MSG.TYPE[2,4] = "EDST"
        CALL IB.PROCESS.ACCT.BAL.SB
        CALL IB.ATM.OFS.SB(INMSG)
        YR.OFS.CALLED = @TRUE

    CASE YR.EVENT.PROCESS = "BAL"
        Y.SEND.ZERO.BAL =0
        CALL IB.ATM.PROCESS.BALANCE.SB

    CASE YR.EVENT.PROCESS = "STMT"
        Y.SEND.ZERO.BAL = 0
        CALL IB.ATM.PROCESS.BALANCE.SB

    CASE YR.EVENT.PROCESS = "OFS"
        Y.SEND.ZERO.BAL = 0
        CALL IB.PROCESS.ACCT.BAL.SB
        IF NOT(Y.CARD.STATUS) THEN
            YMSG = "CARD AND POSTING RESTRICTION PASS CARD.STATUS=" : Y.CARD.STATUS
            GOSUB LOG.ERROR
            CALL IB.ATM.OFS.SB(INMSG)
            YR.OFS.CALLED = @TRUE
        END ELSE
            YMSG = "Y.CARD.STATUS=" : Y.CARD.STATUS : " TRANSACTION REJECTED"
            GOSUB LOG.ERROR
            GOSUB RETURN.ERROR.RECORD
        END

    CASE YR.EVENT.PROCESS = "PIN"
        Y.SEND.ZERO.BAL = 0
        JUST.GET.BALANCE = 1
        CALL IB.ATM.PROCESS.BALANCE.SB
        IF Y.CARD.STATUS THEN
            GOSUB RETURN.ERROR.RECORD
        END ELSE
            CALL IB.ATM.RETURN.MSG.SB
        END

    CASE YR.EVENT.PROCESS EQ "NIB"
        Y.ERR = 1
        CALL IB.ATM.PROCESS.ACCOUNT.SB
        IF NOT(Y.CARD.STATUS) THEN
            CALL IB.ATM.OFS.SB(INMSG)
            YR.OFS.CALLED = @TRUE
        END ELSE
            CALL IB.ATM.RETURN.MSG.SB
        END

    CASE YR.EVENT.PROCESS = "IBAN"
        CALL IB.ATM.PROCESS.ACCOUNT.SB
        CALL IB.ATM.RETURN.MSG.SB

    CASE OTHERWISE
        YR.ERROR.IN.APPLICATION = FAIL.DUE.TO.TECH.ERROR
        Y.CARD.STATUS = 6
        GOSUB RETURN.ERROR.RECORD

    END CASE

    IF YR.OFS.CALLED = @FALSE THEN
        GOSUB SET.BYPASS.ENQ
    END

    RETURN

RETURN.ERROR.RECORD:

    Y.SEND.ZERO.BAL = 1
    JUST.GET.BALANCE = 1
    CALL IB.ATM.PROCESS.BALANCE.SB
    CALL IB.ATM.RETURN.ERROR.SB

    RETURN

LOG.ERROR:

    IF ETEXT THEN
        IB.LOG.LEVEL = "ERROR"
    END ELSE
        ETEXT = YMSG
    END

    CALL IB.ATM.LOG.ERROR( G$THIS )

    ETEXT = ""

    IB.LOG.LEVEL = "DEBUG"

    RETURN

INITIALISE:

    IF NOT(M.CONTINUE) THEN RETURN

    THIS.UPD.PROCESS = 0

    YR.ERROR.IN.APPLICATION = 0

    TXN.ERROR.TRACE = ""

    Y.SEND.ZERO.BAL = 0
    YSPACE = CHARX(0)
    INMSG = CHANGE(INMSG,YSPACE,"")

    YR.CUSTOMER.ID = ""

    ID.NEW= ""
    Y.CARD.STATUS = ""

    DEFAULT.LOG = "DEBUG"

    IB.LOG.LEVEL = DEFAULT.LOG

    RETURN.DATA = ""

    G$THIS = "IB.ATM.MSG.TEXT.IN"
    YR.CARD.VALIDATION.ERROR = 0
    YR.ERROR.IN.APPLICATION = 0

    IN.PROCESS.ERROR = 0
    IB.ATM.BALANCE.SB = ""

    BEGIN CASE

    CASE YR.INTERFACE = "FILE"
        USER.NUMBER = 1
        MSG.DATA = YR.MESSAGE.ARRAY
    CASE YR.INTERFACE = "RETRY"
        USER.NUMBER = 1
        MSG.DATA = INMSG
    CASE OTHERWISE
        YMSG = INMSG
        GOSUB LOG.ERROR
        YMSG.KEY = INMSG[1,12]
        USER.NUMBER = INMSG["|",2,1]
        USER.NUMBER = 1

        YMSG = "USER.ID : " : USER.NUMBER
        GOSUB LOG.ERROR

        YMSG = "BYPASS"
        R.XML = INMSG["|",1,1][13,LEN(INMSG)]

        YR.ALREADY.PROCESSED = 0
        YR.RETURN = R.XML
        YR.ACTION = "CHECK"

        CALL IB.MSG.LOGGER.SB(YR.ACTION, YR.RETURN)

        BEGIN CASE

        CASE YR.RETURN EQ "ERROR" OR YR.RETURN EQ "BYPASS"
            YMSG = YMSG.KEY : "-RECORD BEING PROCESSED BY ANOTHER THREAD - SEND BLANK RESPONSE"
            GOSUB LOG.ERROR
            IN.MSG.TYPE = R.XML[1,4]
            INMSG  = "BYPASS"
            YR.RETURN = ""
            YR.ERROR.IN.APPLICATION = FAIL.TXN.IN.PENDING.MODE
            IN.PROCESS.ERROR = 1
            GOSUB CRACK.RECORD

        CASE YR.RETURN
            YMSG = "MESSAGE ALREADY PROCESSED " : YMSG.KEY
            GOSUB LOG.ERROR
            RETURN.DATA = YR.RETURN
            YR.ALREADY.PROCESSED = 1
            IN.MSG.TYPE = R.XML[1,4]
            INMSG = "BYPASS"

        CASE OTHERWISE
            MSG.DATA = ""
            GOSUB CRACK.RECORD
            OFS.EVENTS = "CASH.WITHDRAWAL" : FM : "BILL.PAYMENT" : FM : "CHEQUE.REQUEST" : FM : "BUY.POS" : FM : "INT.BANK.TRF.PAY" : FM : "ADVANCE"
            DYN.IN.MSG = MSG.DATA
            Y1 = CHANGE(MSG.DATA,@VM, "^")
            YMSG = Y1<1>
            GOSUB LOG.ERROR
            YMSG = Y1<2>
            GOSUB LOG.ERROR
        END CASE

    END CASE

    IF INMSG = "BYPASS" THEN
        GOSUB SET.BYPASS.ENQ
    END

    RETURN

CRACK.RECORD:

    VAR.TAGS = RAISE(IB.BAL.VARIABLE.DATA.TAG)

    YMSG = R.XML
    YMSG.IN = YMSG
    YR.MSG.ID =  YMSG.IN[1,4]
    YR.VER.ID = YMSG.IN[5,2]

    R.IB.MSG.GRP.SB = ""
    M.MESSAGE.ID = YR.MSG.ID : "." : YR.VER.ID
    READ R.IB.MSG.GRP.SB FROM F.IB.MSG.GRP.SB, M.MESSAGE.ID ELSE
        M.MESSAGE.ID = YR.MSG.ID
        READ R.IB.MSG.GRP.SB FROM F.IB.MSG.GRP.SB, M.MESSAGE.ID ELSE NULL
    END
    IF NOT(R.IB.MSG.GRP.SB) THEN
        ETEXT = "ERROR: --- M.MESSAGE.ID " : M.MESSAGE.ID
        GOSUB LOG.ERROR
    END
    POS = 1
    MSG.DATA = ""

    NO.LAY = DCOUNT(R.IB.MSG.GRP.SB<IB.MSG.GRP.TAG.GRP.REF>, @VM )
    FOR J = 1 TO NO.LAY
        M.LAY.ID = R.IB.MSG.GRP.SB<IB.MSG.GRP.TAG.GRP.REF,J>
        YMSG = "M.LAY.ID=" : M.LAY.ID
        GOSUB LOG.ERROR
        READ R.HEAD FROM F.IB.MESSAGE.LAYOUT.SB, M.LAY.ID ELSE
            YMSG = "ERROR: M.LAY.ID=" : M.LAY.ID
            GOSUB LOG.ERROR
        END
        IF R.HEAD THEN
            YNO = DCOUNT(R.HEAD<MSG.TAG.ID>, @VM)
            FOR X = 1 TO YNO
                YTAG = R.HEAD<MSG.TAG.ID,X>
                YLEN = R.HEAD<MSG.TAG.VALUE,X> * 1
                YDATA = YMSG.IN[POS,YLEN]

                YADD = 0
                BEGIN CASE
                CASE YTAG = YR.MESSAGE.CODE
                    YR.VARIABLE = YDATA
                    YADD = 1
                CASE INDEX(VAR.TAGS,YTAG,1)
                    YR.VAR.TAG = YTAG
                    GOSUB GET.VAR.TAG.DATA
                    YADD = 0
                CASE 1
                    YADD = 1
                END CASE
                IF YADD THEN
                    POS += YLEN
                    MSG.DATA<MSG.TAG.ID,-1> = YTAG * 1
                    MSG.DATA<MSG.TAG.VALUE,-1> = YDATA
                    YMSG = FMT(YTAG,"10L") : FMT(YDATA,"50L")
                    GOSUB LOG.ERROR
                END
            NEXT X
        END
    NEXT J

    RETURN

GET.VAR.TAG.DATA:

    VAR.TAG.ID = YR.MSG.ID : "." : YR.MESSAGE.CODE : "." : YR.VAR.TAG : "." : YR.VARIABLE : "." : YR.VER.ID

    R.VAR = ""
    READ R.VAR FROM F.IB.MESSAGE.LAYOUT.SB, VAR.TAG.ID ELSE
        VAR.TAG.ID = YR.MESSAGE.CODE:".":YR.VAR.TAG : "." : YR.VARIABLE : "." : YR.VER.ID
        READ R.VAR FROM F.IB.MESSAGE.LAYOUT.SB, VAR.TAG.ID ELSE
            VAR.TAG.ID =   YR.MSG.ID : "." : YR.MESSAGE.CODE : "." : YR.VAR.TAG : "." : YR.VARIABLE
            READ R.VAR FROM F.IB.MESSAGE.LAYOUT.SB, VAR.TAG.ID ELSE
                VAR.TAG.ID =  YR.MESSAGE.CODE : "." : YR.VAR.TAG : "." : YR.VARIABLE
                READ R.VAR FROM F.IB.MESSAGE.LAYOUT.SB, VAR.TAG.ID ELSE NULL
            END
        END
    END
    YMSG = "VAR.TAG.ID=" : VAR.TAG.ID
    GOSUB LOG.ERROR
    IF R.VAR THEN
        VAR.NO = DCOUNT(R.VAR<MSG.TAG.ID>, @VM)
        FOR K = 1 TO VAR.NO
            YTAG = R.VAR<MSG.TAG.ID,K>
            YLEN = R.VAR<MSG.TAG.VALUE,K> * 1
            YDATA = YMSG.IN[POS,YLEN]
            POS += YLEN
            MSG.DATA<MSG.TAG.ID,-1> = YTAG * 1
            MSG.DATA<MSG.TAG.VALUE,-1> = YDATA
            YMSG = FMT(YTAG,"10L") : FMT(YDATA,"50L")
            GOSUB LOG.ERROR
        NEXT K

    END ELSE
        ETEXT = "ERROR - " : VAR.TAG.ID : " VARIABLE DATA NOT FOUND"
        GOSUB LOG.ERROR
    END

    RETURN

GET.USER.INFO:

    USER.INFO = ""
    READ R.IB.OFS.USER.SB FROM F.IB.OFS.USER.SB, USER.NUMBER THEN
        OFS.USER.ID = R.IB.OFS.USER.SB<  IB.EVE.USER.ID >

        FN.OFS.USER.SB = "F.OFS.USER.SB"
        F.OFS.USER.SB = ""
        CALL OPF(FN.OFS.USER.SB, F.OFS.USER.SB)

        FV.USER = ""
        CALL OPF("F.USER", FV.USER)

        READ RV.USER FROM FV.USER,OFS.USER.ID THEN

            USER.SON = RV.USER< EB.USE.SIGN.ON.NAME >

            READ R.OFS.USER.SB FROM F.OFS.USER.SB, OFS.USER.ID ELSE NULL

            PWORD = R.OFS.USER.SB<SB.OFS.PASSWORD>
            IF R.OFS.USER.SB<SB.OFS.PASSWORD+1> THEN
                PWORD := FM :  R.OFS.USER.SB<SB.OFS.PASSWORD+1>
            END

            IF PWORD THEN
                CALL OFS.USER.ENCR.DECR.SB ( PWORD, "DE")
            END
            USER.INFO<1> = USER.SON
            USER.INFO<2> = PWORD
        END
    END
    RETURN

SET.BYPASS.ENQ:

    GOSUB GET.USER.INFO

    OFS.REQ = "ENQUIRY.SELECT,," : USER.INFO<1> : "/" : USER.INFO<2> : "/MZ0010101,ATM.BYPASS.SB"
    YMSG = OFS.REQ
    GOSUB LOG.ERROR
    INMSG = OFS.REQ

    RETURN

END
