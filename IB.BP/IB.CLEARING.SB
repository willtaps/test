    SUBROUTINE IB.CLEARING.SB

    $INCLUDE I_COMMON
    $INCLUDE I_EQUATE
    $INCLUDE I_GTS.COMMON
    $INCLUDE I_TSA.COMMON
    $INCLUDE I_F.TSA.STATUS
    $INCLUDE I_BATCH.FILES
    $INCLUDE I_F.TSA.SERVICE
    $INCLUDE I_F.USER
    $INCLUDE IB.BP I_IB.ATM.MSG.COMMON
    $INCLUDE IB.BP I_IB.TAG.SB.COMMON
    $INCLUDE IB.BP I_F.IB.CORR.FILE.SB
    $INCLUDE IB.BP I_F.IB.ERMB.SB
    $INSERT I_F.IB.FILE.TAGS.SB
    $INSERT I_F.IB.MESSAGE.TAG.SB
    $INSERT I_F.IB.TAG.GRP.SB
    $INSERT I_F.IB.PARAMETER.SB
    $INSERT I_F.IB.EDST.SUMM.SB
    $INCLUDE SB.SPARROW.BP I_F.SB.SPARROW.ATM.TXN.NO
    $INSERT IB.BP I_F.IB.FILE.PARAMETER.SB
    $INSERT IB.BP I_F.IB.ATM.POS.LINK.SB
    $INSERT IB.BP I_F.IB.ATM.MESSAGE.LOG.SB
*
    EQU MSG.TAG.ID TO 1,
    MSG.TAG.VALUE TO 2

    YR.COMO.START = 0
    IF NOT(RUNNING.UNDER.BATCH) THEN
        YR.COMO.START =1
        EXEC "COMO ON IB.CLEARING.SB.txt"
    END

    GOSUB INITIALISE

    Y.SAVE.COMPANY = ID.COMPANY

    LOOP
    UNTIL ABORT.PROCESS
        GOSUB PROCESS
        GOSUB CHECK.FOR.STOP
    REPEAT

    CALL LOAD.COMPANY( Y.SAVE.COMPANY)

    IF YR.COMO.START THEN
        EXEC "COMO OFF"
    END

    YR.INTERFACE = ""

** Processamento do unlock de cativos ***
    CALL SB.UNLOCK.EVENT.IB

    RETURN

*-------
PROCESS:
*-------

    CALL OCOMO("ENTER MAIN LOOP....")
    YFILE.LIST = ""
    YFILE.NO = 0
    CMD = "SELECT " : FN.IN.FILE : " WITH @ID UNLIKE PROCESSED..."
    EXEC CMD
    LOOP
        READNEXT YR.IN.FILE ELSE YR.IN.FILE = ""
    WHILE YR.IN.FILE DO
        YFILE.LIST<-1> = YR.IN.FILE
        YFILE.NO += 1
    REPEAT

    FOR FF = 1 TO YFILE.NO
        YR.IN.FILE = YFILE.LIST<FF>
        CALL OCOMO("PROCESSING FILE " : YR.IN.FILE)
        GOSUB PROCESS.FILE
    NEXT FF

    RETURN

*----------------
OPEN.OUTPUT.FILE:
*----------------

    YR.ARC.FILE = YR.IN.FILE:".":TIME()

    OPENSEQ ARC.PATH , "PROCESSED." : YR.ARC.FILE TO F.OUTPUT ELSE
        CREATE F.OUTPUT ELSE NULL
    END

    RETURN

*------------
PROCESS.FILE:
*------------

    YR.PROCESS.EORI = @FALSE
    YR.FILE.TYPE = ""
    YR.FILE.JULDATE = ""

    OPENSEQ OUT.PATH, YR.IN.FILE READONLY TO F.INPUT THEN
        GOSUB OPEN.OUTPUT.FILE
        LOOP
            READSEQ YLINE FROM F.INPUT ELSE EXIT
            YMSG.LOG = "REQUEST :" : YLINE
            GOSUB WRITE.FILE.LOG

            YRECORD.TYPE = YLINE[1,1]

            BEGIN CASE

            CASE  YRECORD.TYPE = "0"
                M.IB.FILE.TAGS.SB.ID = "HEADER"
                GOSUB READ.IB.FILE.TAGS.SB.FILE
                GOSUB MAP.RECORD
                YR.FILE.TYPE = YLINE[3,4]
                CALL OCOMO("HEADER:" : YR.FILE.TYPE)
                YMSG.LOG = "RESPONSE : HEADER"
                GOSUB WRITE.FILE.LOG
                LOCATE "110" IN  YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
                    YR.FILE.JULDATE = YR.MESSAGE.ARRAY<2,POS>
                    IF YR.FILE.TYPE = "EORI" THEN
                        M.IB.EORI.JULDATE.SB.ID = "EDST." : YR.FILE.JULDATE
                        YMSG = "CHECKING FOR JULDATE FILE " : FN.IB.EORI.JULDATE.SB : ">":  M.IB.EORI.JULDATE.SB.ID
                        GOSUB LOG.ERROR
                        READ R.IB.EORI.JULDATE.SB FROM F.IB.EORI.JULDATE.SB, M.IB.EORI.JULDATE.SB.ID THEN
                            YR.PROCESS.EORI = @TRUE
                        END
                        CALL OCOMO("FILE FOUND ? " : IFS(YR.PROCESS.EORI=@TRUE,"YES","NO"))
                    END
                END

            CASE YRECORD.TYPE = 9
                M.IB.FILE.TAGS.SB.ID = "FOOTER"
                CALL OCOMO("FOOTER:" : YR.FILE.TYPE)
                GOSUB READ.IB.FILE.TAGS.SB.FILE
                GOSUB MAP.RECORD
                YMSG.LOG =  "RESPONSE : FOOTER"
                GOSUB WRITE.FILE.LOG

            CASE YR.FILE.TYPE = "EDST"
                GOSUB EDST.PROCESS

            CASE YR.FILE.TYPE = "ERMB"
                GOSUB ERMB.PROCESS

            CASE YR.FILE.TYPE = "EORI"
                GOSUB EORI.PROCESS

            CASE YR.FILE.TYPE = "CCLN"
                GOSUB CCLN.PROCESS

            CASE OTHERWISE
                M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
                GOSUB READ.IB.FILE.TAGS.SB.FILE
                GOSUB MAP.RECORD
                YMSG.LOG = "RESPONSE : NULL - MESSAGE NOT MAPPED"
                GOSUB WRITE.FILE.LOG

            END CASE

        REPEAT

        CLOSESEQ F.INPUT
        COPY.AND.DEL = @TRUE
        IF YR.FILE.TYPE = "EORI" AND NOT(YR.PROCESS.EORI) THEN
            COPY.AND.DEL = @FALSE
        END
        IF COPY.AND.DEL THEN

            CMD = "COPY FROM " : FN.IN.FILE : " TO " : FN.IN.ARC : " " : YR.IN.FILE : "," : YR.ARC.FILE
            CALL OCOMO(CMD)
            EXEC CMD
            DELETE F.IN.FILE, YR.IN.FILE
            CALL OCOMO("DELETING FILE " : FN.IN.FILE : " " : YR.IN.FILE)

            IF YR.FILE.TYPE = "EDST" THEN

*Processamento do sweeping da Coca-Cola
                CALL V.SB.SWEEP.PAG.SERV

                R.IB.EORI.JULDATE.SB = TIMEDATE()
                M.IB.EORI.JULDATE.SB.ID = YR.FILE.TYPE : "." : YR.FILE.JULDATE
                CALL OCOMO("WRITE-" : FN.IB.EORI.JULDATE.SB : ">" : M.IB.EORI.JULDATE.SB.ID)
                WRITE R.IB.EORI.JULDATE.SB TO F.IB.EORI.JULDATE.SB,M.IB.EORI.JULDATE.SB.ID
            END

            CLOSESEQ F.OUTPUT
            APPLICATION = SAVE.APPL
            V = SAVE.V
        END
    END

    RETURN

EDST.PROCESS:

    YMSG = "*************** START EDST - TRANSACTION  ***************"
    GOSUB LOG.ERROR

    CODRESP.VALUE = ""
    M.AC.LOCKED.EVENTS.ID = ""

    BEGIN CASE

    CASE YRECORD.TYPE = "1"

        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
        YR.MESSAGE.ARRAY<2,-1> = "1100"

        YSTATUS = ""

        GOSUB PROCESS.MESSAGE
        YMSG = "CHECKING STATUS OF TRANSACTION RESULT ? " : IFS(YSTATUS=1,"SUCCESS","FAIL")
        GOSUB LOG.ERROR

        IF YSTATUS = 1 THEN
            LOCATE TAG.NRLOG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN

                YR.NRLOG =  YR.MESSAGE.ARRAY<2,POS>
                IF YR.NRLOG[1,1] = "5" THEN
                    LOCATE TAG.NRIDRESP  IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
                        YR.NRIDRESP =  YR.MESSAGE.ARRAY<2,POS>
                        YMSG = "NRIDRESP=" : YR.NRIDRESP
                        GOSUB LOG.ERROR
                        IF YR.NRIDRESP THEN
                            BRANCH.CODE = YR.NRIDRESP[2,3]
                            LOCK.FUND.BODY = YR.NRIDRESP[5,99]
                            M.AC.LOCKED.EVENTS.ID = "ACLK" : LOCK.FUND.BODY : FM : BRANCH.CODE
                            YMSG = "POSTING AC.LOCKED.EVENTS ID=" : M.AC.LOCKED.EVENTS.ID : " COMPANY [" : BRANCH.CODE : "] ONLY IF STATUS = 1 OTHERWISE SKIP"
                            GOSUB LOG.ERROR
                            GOSUB POST.AC.LOCKED.EVENTS


*                           Linkar locked events com FT
*                           20150105 - Dercio.Anselmo
                            ALE.ID = "ACLK" : LOCK.FUND.BODY
                            FT.ID = R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.GLOBUS.FT.NO>
                            COMPANY.ID = BRANCH.CODE
*CALL SB.LINK.LOCKED.EVENT.FT(FT.ID,ALE.ID,COMPANY.ID)
                        END
                    END
                END
            END
        END

        LOCATE YR.MESSAGE.CODE IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.CODETRN = YR.MESSAGE.ARRAY<2,POS>
        END
        CALL OCOMO("TESTING YR.CODETRN FOR IB.EDST.SUMM.SB UPDATE. ONLY UPDATE IF VALUE [01] THIS ENTRY - " : YR.CODETRN )
        IF YR.CODETRN = "01" THEN
            GOSUB UPDATE.IB.EDST.SUMM.SB.FILE
        END

    CASE YRECORD.TYPE = "2"
        POS.PL = 0
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
        YR.MESSAGE.ARRAY<2,-1> = YRECORD.TYPE:YR.FILE.TYPE
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
        YR.MESSAGE.ARRAY<2,-1> = "1100"
        LOCATE YR.MESSAGE.CODE IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            IF  YR.MESSAGE.ARRAY<2,POS> = "00" THEN
                YR.MESSAGE.ARRAY<2,POS> = 33
            END
        END ELSE
            YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.CODE
            YR.MESSAGE.ARRAY<2,-1> = 33
        END
        GOSUB PROCESS.MESSAGE


    CASE YRECORD.TYPE = "3"
        POS.PL = 0
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
        YR.MESSAGE.ARRAY<2,-1> = "3EDST"
        LOCATE YR.MESSAGE.CODE IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.CODETRN = YR.MESSAGE.ARRAY<2,POS>
            CALL OCOMO("YR.CODETRN=" : YR.CODETRN : " TEST FOR PL.ONLY=" : RAISE(YR.PL.ONLY))
            LOCATE YR.CODETRN IN YR.PL.ONLY<1,1> SETTING POS ELSE
                GOSUB PROCESS.MESSAGE
            END
        END
        POS.PL = 1
        GOSUB CLEAN.TAGS
        GOSUB SET.BANK.CODE
        GOSUB PROCESS.MESSAGE
        POS.PL = 0

    CASE YRECORD.TYPE = "6"

        POS.PL = 0
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        GOSUB SET.BANK.CODE

        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
        YR.MESSAGE.ARRAY<2,-1> = "6EDST"

        YR.MESSAGE.ARRAY<1,-1> =  YR.MESSAGE.CODE
        YR.MESSAGE.ARRAY<2,-1> = 33

        GOSUB PROCESS.MESSAGE

    CASE OTHERWISE
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YMSG.LOG = "RESPONSE : NULL - MESSAGE NOT MAPPED"
        GOSUB WRITE.FILE.LOG
    END CASE

    RETURN

ERMB.PROCESS:

    BEGIN CASE

    CASE  YRECORD.TYPE = "1"
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
        YR.MESSAGE.ARRAY<2,-1> = "1ERMB"
        GOSUB UPDATE.ERMB.FILE

    CASE OTHERWISE
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YMSG.LOG = "RESPONSE : NULL - MESSAGE NOT MAPPED"
        GOSUB WRITE.FILE.LOG
    END CASE

    RETURN

CCLN.PROCESS:

    BEGIN CASE

    CASE  YRECORD.TYPE = "2"
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
        YR.MESSAGE.ARRAY<2,-1> = YRECORD.TYPE:YR.FILE.TYPE
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.CODE
        YR.MESSAGE.ARRAY<2,-1> = "71"
        GOSUB PROCESS.MESSAGE

    CASE OTHERWISE
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        YMSG.LOG = "RESPONSE : NULL - MESSAGE NOT MAPPED"
        GOSUB WRITE.FILE.LOG
    END CASE

    RETURN

EORI.PROCESS:

    YMSG.ERR = ""
    TAG.314.VALUE = ""

    IF NOT(YR.PROCESS.EORI) THEN RETURN

    BEGIN CASE

    CASE YRECORD.TYPE = "1" OR YRECORD.TYPE = "2"
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YR.MESSAGE.ARRAY<1,-1> = YR.MESSAGE.TYPE
        YR.MESSAGE.ARRAY<2,-1> = YRECORD.TYPE:YR.FILE.TYPE
        YR.MESSAGE.ARRAY<1,-1> = IB.BANK.ID.CODE.TAG
        YR.MESSAGE.ARRAY<2,-1> = TRIM(R.IB.PARAMETER.SB<IB.PARM.OWN.BANK.CODE>)

        YR.TERMINAL.ID = ""
        LOCATE "178" IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.MESSAGE.ARRAY<1,-1> = IB.TERMINAL.ID.TAG
            YR.TERMINAL.ID = FMT(YR.MESSAGE.ARRAY<2,POS> ,'R%10')
            YR.MESSAGE.ARRAY<2,-1> = YR.TERMINAL.ID
        END

        LOCATE "308" IN YR.MESSAGE.ARRAY<1,1> SETTING POS ELSE
            YR.MESSAGE.ARRAY<1,POS> = 308
            YR.MESSAGE.ARRAY<2,POS> = YR.FILE.JULDATE
        END

        TAG.118.VALUE=""
        LOCATE "118" IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
            TAG.118.VALUE = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
        END

        YTXN.AMT = 0
        LOCATE "114" IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YTXN.AMT = YR.MESSAGE.ARRAY<2,POS> * 1
        END

        LOCATE "314" IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            TAG.314.VALUE = YR.MESSAGE.ARRAY<2,POS>
            YMSG = "TAG 314 HAS VALUE " : TAG.314.VALUE
            CALL OCOMO(YMSG)
        END

        M.IB.EDST.SUMM.SB.ID = YR.FILE.JULDATE:".":YR.TERMINAL.ID : "." : TAG.314.VALUE : "." : TAG.118.VALUE
        CALL OCOMO("M.IB.EDST.SUMM.SB.ID=" : M.IB.EDST.SUMM.SB.ID)

        ADJ.AMT = 0
        IF TAG.314.VALUE = "1" THEN
            READ R.IB.EDST.SUMM.SB FROM F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID THEN
                ADJ.AMT = SUM(R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TOTAMT>)
            END
        END

        IF YTXN.AMT THEN
            YTXN.AMT -= ADJ.AMT
            IF NOT(YTXN.AMT) THEN
                YMSG.LOG = "RESPONSE : SKIP TXN.AMOUNT NULL "
                GOSUB WRITE.FILE.LOG
            END ELSE
                YR.MESSAGE.ARRAY<1,-1> = 8
                YR.MESSAGE.ARRAY<2,-1> = YTXN.AMT

                YR.MESSAGE.ARRAY<1,-1> =  YR.MESSAGE.CODE
                YR.MESSAGE.ARRAY<2,-1> = 33

                YR.MESSAGE.ARRAY<1,-1> =  IB.TERM.TYPE.TAG
                YR.MESSAGE.ARRAY<2,-1> = "A"

                YR.SAVE.ID.PARAMS = R.IB.PARAMETER.SB<IB.PARM.MSG.KEY>
                R.IB.PARAMETER.SB<IB.PARM.MSG.KEY> = EORI.KEY.TAGS
                GOSUB PROCESS.MESSAGE
                R.IB.PARAMETER.SB<IB.PARM.MSG.KEY> = YR.SAVE.ID.PARAMS
            END
        END ELSE
            YMSG.ERR:= " SKIP AMOUNT IS NULL"
        END

        IF YRECORD.TYPE = "2" THEN

            M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
            GOSUB READ.IB.FILE.TAGS.SB.FILE
            GOSUB MAP.RECORD

            LOCATE TAG.330 IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
                YR.AMT = YR.MESSAGE.ARRAY<2,POS> * 1
                IF YR.AMT THEN
                    LOCATE "178" IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
                        IF YR.MESSAGE.ARRAY<2,POS> THEN
                            CALL OCOMO("TERMINAL ID=" : YR.MESSAGE.ARRAY<2,POS>)
                        END ELSE
                            YMSG.DISP= " NO TERMINAL ID FOUND - STOP PROCESSING"
                            CALL OCOMO(YMSG.DISP)
                            YMSG := YMSG.DISP
                        END
                        IF YR.MESSAGE.ARRAY<2,POS> THEN
                            GOSUB CLEAN.TAGS
                            LOCATE "8" IN YR.MESSAGE.ARRAY<1,1> SETTING POS ELSE
                                YR.MESSAGE.ARRAY<1,POS> = 8
                            END
                            YR.MESSAGE.ARRAY<2,POS> = YR.AMT
                            EORI.TAG.330 = @TRUE
                            CALL OCOMO("PROCESSING EORI TAG 330 MESSAGE")
                            GOSUB PROCESS.MESSAGE
                            EORI.TAG.330 = @FALSE
                        END
                    END ELSE
                        YMSG.DISP = "TAG 330 HAS AMOUNT OF [ " : YR.AMT : " BUT TAG-" : IB.TERMINAL.ID.TAG : " NOT FOUND. UNABLE TO CONTINUE"
                        CALL OCOMO(YMSG.DISP)
                        YMSG.ERR := YMSG.DISP
                    END
                END ELSE
                    YMSG.ERR := "AMOUNT ON TAG 330 IS NULL -SKIP"
                END
            END ELSE
                YMSG.ERR:= "TAG 300 NOT FOUND - SKIP TRANSACTION"
            END
        END

    CASE OTHERWISE
        M.IB.FILE.TAGS.SB.ID = YR.FILE.TYPE : "-" : YRECORD.TYPE
        GOSUB READ.IB.FILE.TAGS.SB.FILE
        GOSUB MAP.RECORD
        YMSG.ERR = "NULL - MESSAGE NOT MAPPED TIPREG=": YRECORD.TYPE
    END CASE

    IF YMSG.ERR THEN
        YMSG.LOG = "RESPONSE:" : YMSG.ERR
        GOSUB WRITE.FILE.LOG
        YMSG.ERR = ""
    END

    RETURN

CLEAN.TAGS:

    NO.TAGS = DCOUNT(YR.MESSAGE.ARRAY<1>,VM)
    FOR J = 1 TO NO.TAGS
        YR.MESSAGE.ARRAY<1,J> = YR.MESSAGE.ARRAY<1,J> * 1
    NEXT J
    RETURN

MAP.RECORD:

    YR.TERM = ""
    YR.CODE.TXN = ""

    CALL OCOMO("MAPPING RECORD")
    YR.POS =1
    YR.MESSAGE.ARRAY = ""
    FILE.POS = 1
    NO.TAGS = DCOUNT(R.IB.FILE.TAGS.SB<IB.FL.TAGS.TAG.NO>, VM )
    FOR NN = 1 TO  NO.TAGS
        M.IB.MESSAGE.TAG.SB.ID = R.IB.FILE.TAGS.SB<IB.FL.TAGS.TAG.NO,NN>
        GOSUB READ.IB.MESSAGE.TAG.SB.FILE
        YTAG.LENTH = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.LENGHT>
        YVALUE = YLINE[FILE.POS,YTAG.LENTH]
        FILE.POS += YTAG.LENTH

        IF M.IB.MESSAGE.TAG.SB.ID  =  YR.MESSAGE.CODE THEN
            YR.VARIABLE.TAG = YVALUE
        END
        LOCATE M.IB.MESSAGE.TAG.SB.ID IN FILE.VARIABLE.DATA SETTING V.POS THEN
            VARIABLE.DATA = YVALUE
            GOSUB PROCESS.VARIABLE.DATA
        END ELSE
            YR.MESSAGE.ARRAY<1, YR.POS> =  M.IB.MESSAGE.TAG.SB.ID * 1
            YR.MESSAGE.ARRAY<2,YR.POS> = YVALUE
            YR.POS += 1
            CALL OCOMO( "TAG=:" : M.IB.MESSAGE.TAG.SB.ID : " YVALUE=:" : YVALUE )
        END

        BEGIN CASE
        CASE M.IB.MESSAGE.TAG.SB.ID = "003"
            YR.TERM = YVALUE
        CASE  M.IB.MESSAGE.TAG.SB.ID = "120"
            YR.CODE.TXN = YVALUE
        END CASE

        IF M.IB.FILE.TAGS.SB.ID = "HEADER" AND R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONSTANT.VALUE,1>[1,1] = "!" THEN
            BEGIN CASE
            CASE R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONSTANT.VALUE,1>[2,99] = "YR.FILE.TYPE"
                YR.FILE.TYPE = YVALUE
            CASE OTHERWISE
                NULL
            END CASE
        END
    NEXT NN

    GOSUB LOG.MESSAGE

    RETURN

PROCESS.VARIABLE.DATA:

    VAR.POS = 1

    CALL OCOMO("VAR.DATA=" : VARIABLE.DATA )
    VAR.DATA.ID = M.IB.FILE.TAGS.SB.ID : "." : YR.TERM : YR.CODE.TXN
    CALL OCOMO("VAR.DATA.ID=": VAR.DATA.ID)
    R.VAR.TAGS = ""   ; YERR = ""
    CALL F.READ(FN.IB.FILE.TAGS.SB, VAR.DATA.ID, R.VAR.TAGS, F.IB.FILE.TAGS.SB, YERR)

    IF YERR THEN
        CALL OCOMO("VAR.DATA NOT FOUND RETURN FULL STRING ....")
        YR.MESSAGE.ARRAY<1, YR.POS> =  M.IB.MESSAGE.TAG.SB.ID * 1
        YR.MESSAGE.ARRAY<2,YR.POS> = YVALUE
        YR.POS += 1
        CALL OCOMO( "TAG=:" : M.IB.MESSAGE.TAG.SB.ID : " YVALUE=:" : YVALUE )
    END ELSE
        NO.VAR.TAGS = DCOUNT(R.VAR.TAGS<IB.FL.TAGS.TAG.NO>, VM )
        FOR VV = 1 TO  NO.VAR.TAGS
            M.IB.MESSAGE.TAG.SB.ID = R.VAR.TAGS<IB.FL.TAGS.TAG.NO,VV>
            GOSUB READ.IB.MESSAGE.TAG.SB.FILE
            YTAG.LENTH = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.LENGHT>
            YVALUE = VARIABLE.DATA[VAR.POS,YTAG.LENTH]
            VAR.POS += YTAG.LENTH
            YR.MESSAGE.ARRAY<1, YR.POS> =  M.IB.MESSAGE.TAG.SB.ID * 1
            YR.MESSAGE.ARRAY<2,YR.POS> = YVALUE
            YR.POS += 1
            CALL OCOMO( "TAG=:" : M.IB.MESSAGE.TAG.SB.ID : " YVALUE=:" : YVALUE )
        NEXT VV
    END

    RETURN


LOG.MESSAGE:

    CALL OCOMO("LOG MESSAGE")
    IF YR.FILE.TYPE THEN
        IF YRECORD.TYPE <> "0" AND  YRECORD.TYPE <> "9" THEN
            YR.FILE.NAME = YR.FILE.TYPE
*CALL IB.MSG.LOG.RUN.SB(YR.FILE.NAME)
        END
    END

    RETURN

SET.BANK.CODE:

    LOCATE IB.BANK.ID.CODE.TAG IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS ELSE
        YR.MESSAGE.ARRAY<MSG.TAG.ID,POS> = IB.BANK.ID.CODE.TAG
    END
    YR.MESSAGE.ARRAY<2,POS> = TRIM(R.IB.PARAMETER.SB<IB.PARM.OWN.BANK.CODE>)

    RETURN

GET.TRANS.ID:

    BEGIN CASE
    CASE YR.EDST.SUMM
        YR.TRANS.KEY.ID = M.IB.EDST.SUMM.SB.ID

    CASE YR.FILE.TYPE = "EORI"
        YR.TRANS.KEY.ID = M.IB.EDST.SUMM.SB.ID

    CASE OTHERWISE

        YR.TRANS.KEY.ID = ""
        NO.IDS = DCOUNT(R.IB.PARAMETER.SB<IB.PARM.MSG.KEY>,VM)
        FOR KK = 1 TO NO.IDS
            TAG.ID = TRIM(R.IB.PARAMETER.SB<IB.PARM.MSG.KEY,KK>,  "0", "L")
            LOCATE TAG.ID IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
                YR.TRANS.KEY.ID := TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
            END
        NEXT KK
        YR.TRANS.KEY.ID = CHANGE(YR.TRANS.KEY.ID," ","")
    END CASE

    CALL OCOMO("YR.TRANS.KEY.ID=" : YR.TRANS.KEY.ID)

    RETURN

CHECK.TRANSACTION:

    CALL OCOMO("CHECKING TRANSACTION CONDITIONS - ALREADY PROCESSED")

    GOSUB GET.TRANS.ID

    YR.IS.DUPLICATE = 0

    IF POS.PL THEN
        YR.TRANS.KEY.ID := "PL"
    END

    IF EORI.TAG.330 THEN
        YR.TRANS.KEY.ID := ".330"
    END

    CALL F.READ(FN.IB.ATM.MESSAGE.LOG.SB, YR.TRANS.KEY.ID , R.IB.ATM.MESSAGE.LOG.SB, F.IB.ATM.MESSAGE.LOG.SB, YERR)
    YMSG = 'YR.TRANS.KEY.ID=' : YR.TRANS.KEY.ID
    CALL OCOMO( YMSG )
    IF R.IB.ATM.MESSAGE.LOG.SB THEN
        YR.IS.DUPLICATE = 1
        YMSG := " DUPLICATE"
    END ELSE
        YMSG := " NOT FOUND"
    END

    GOSUB LOG.ERROR

    RETURN

CHECK.FOR.STOP:

    READ R.TSA FROM F.TSA.SERVICE, PROCESS.NAME THEN
        IF R.TSA<TS.TSM.SERVICE.CONTROL> EQ "STOP" THEN
            CALL OCOMO("TSA.SERVICE - ":PROCESS.NAME:" set to STOP")
            ABORT.PROCESS = 1
        END ELSE
            LOCATE "SLEEP" IN R.TSA<TS.TSM.ATTRIBUTE.TYPE,1> SETTING POS THEN
                YSLEEP.TIME = R.TSA<TS.TSM.ATTRIBUTE.VALUE,POS>
            END
            IF NOT(YSLEEP.TIME) THEN
                YSLEEP.TIME = 300
            END
            CALL OCOMO( "CALLING SERVICE HEARTBEAT")
            CALL SERVICE.HEARTBEAT
            CALL OCOMO( "SLEEPING FOR " : YSLEEP.TIME)
            SLEEP YSLEEP.TIME
        END
    END ELSE
        ABORT.PROCESS = 1
    END

    RETURN

PROCESS.MESSAGE:

    CALL OCOMO("BEGIN - PROCESS.MESSAGE")

    GOSUB CHECK.TRANSACTION

    IF YR.IS.DUPLICATE THEN
        YMSG.LOG = "RESPONSE : " : YMSG
        GOSUB WRITE.FILE.LOG
        RETURN
    END

    GOSUB CHECK.PROCESS.RULES

    IF NOT(M.CONTINUE) THEN
        YMSG.LOG =  "RESPONSE : CONDITIONS NOT MET-" : YMSG
        GOSUB WRITE.FILE.LOG
        RETURN
    END

    INMSG = ""
    CALL OCOMO("CALLING IB.ATM.MSG.TEXT.IN")
    CALL IB.ATM.MSG.TEXT.IN ( INMSG )
    CALL OCOMO("RETURN-VALUE=" : INMSG)
    IF INMSG THEN
        NO.MSG = DCOUNT(INMSG,FM)
        FOR MM = 1 TO NO.MSG
            REQUEST = INMSG<MM>
            RESPONSE = ""
            HUSH ON
            CALL OFS.PROCESS.MANAGER(REQUEST,RESPONSE)
            HUSH OFF
            CALL OCOMO("RESPONSE=" : RESPONSE)
            YMSG.LOG = "RESPONSE : " : RESPONSE
            GOSUB WRITE.FILE.LOG
            ID.NEW = RESPONSE["/",1,1]
            YSTATUS = RESPONSE[",",1,1]["/",3,1]
            IF YSTATUS = 1 THEN
                GOSUB UPDATE.STATUS
            END ELSE
                GOSUB UPDATE.ERROR
            END
        NEXT MM
    END
    RETURN

READ.IB.FILE.TAGS.SB.FILE:

    CALL F.READ(FN.IB.FILE.TAGS.SB, M.IB.FILE.TAGS.SB.ID, R.IB.FILE.TAGS.SB, F.IB.FILE.TAGS.SB, "")
    RETURN


READ.IB.MESSAGE.TAG.SB.FILE:
    CALL F.READ(FN.IB.MESSAGE.TAG.SB, M.IB.MESSAGE.TAG.SB.ID, R.IB.MESSAGE.TAG.SB, F.IB.MESSAGE.TAG.SB, YERR)
    RETURN

READ.IB.TAG.GRP.SB.FILE:
    CALL F.READ(FN.IB.TAG.GRP.SB, M.IB.TAG.GRP.SB.ID, R.IB.TAG.GRP.SB, F.IB.TAG.GRP.SB, YERR)
    RETURN

UPDATE.ERROR:

    IF YR.EDST.SUMM  THEN RETURN

    M.IB.CORR.FILE.SB.ID = YR.TRANS.KEY.ID
    READ R.IB.CORR.FILE.SB FROM  F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID ELSE YERR = "RECORD NOT FOUND"
    IF R.IB.CORR.FILE.SB THEN
        M.IB.CORR.FILE.SB.HIST.ID = M.IB.CORR.FILE.SB.ID : ";" : R.IB.CORR.FILE.SB< IB.CORR.CURR.NO >
        WRITE R.IB.CORR.FILE.SB TO F.IB.CORR.FILE.SB.HIST, M.IB.CORR.FILE.SB.HIST.ID ON ERROR NULL
    END
    R.IB.CORR.FILE.SB< IB.CORR.CURR.NO > += 1
    R.IB.CORR.FILE.SB<IB.CORR.TXN.REF> = YR.ARC.FILE
    OFS.ERROR = RESPONSE[",",2,99999]
    R.IB.CORR.FILE.SB<IB.CORR.OFS.ERROR> = CHANGE(OFS.ERROR,",",@VM)

    YNO = DCOUNT(YR.MESSAGE.ARRAY<1>,VM)
    FOR NN = 1 TO YNO
        IF LEN(YR.MESSAGE.ARRAY<1,NN>) < 3 THEN
            YR.MESSAGE.ARRAY<1,NN> = FMT(YR.MESSAGE.ARRAY<1,NN>,'R%3')
        END
    NEXT NN
    R.IB.CORR.FILE.SB<IB.CORR.TAG> = YR.MESSAGE.ARRAY<1>
    R.IB.CORR.FILE.SB<IB.CORR.VALUE> = YR.MESSAGE.ARRAY<2>
    TIME.STAMP = TIMEDATE()
    R.IB.CORR.FILE.SB<IB.CORR.INPUTTER> = TNO:"_":OPERATOR
    R.IB.CORR.FILE.SB<IB.CORR.AUTHORISER> = TNO:"_":OPERATOR
    X = OCONV(DATE(),"D-")
    X = X[9,2]:X[1,2]:X[4,2]:TIME.STAMP[1,2]:TIME.STAMP[4,2]
    R.IB.CORR.FILE.SB<IB.CORR.DATE.TIME> = X
    R.IB.CORR.FILE.SB<IB.CORR.CO.CODE> = ID.COMPANY
    R.IB.CORR.FILE.SB<IB.CORR.DEPT.CODE>=R.USER<EB.USE.DEPARTMENT.CODE>

    WRITE R.IB.CORR.FILE.SB TO F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID ON ERROR NULL
    CALL OCOMO( "WRITING ERROR FILE " : M.IB.CORR.FILE.SB.ID)
    RETURN

UPDATE.ERMB.FILE:

    IF YR.FILE.TYPE <> "ERMB" THEN RETURN

    R.RECORD = ""
    MSG.DATA = YR.MESSAGE.ARRAY
    APP.NAME = "IB.ERMB.SB"

    M.IB.ERMB.SB.ID = ""
    NO.TAGS = DCOUNT(MSG.DATA<MSG.TAG.ID>,VM)
    FOR TT = 1 TO NO.TAGS
        M.IB.MESSAGE.TAG.SB.ID = FMT(MSG.DATA<MSG.TAG.ID,TT>,'R%3')
        TAG.VALUE = ""
        CALL CACHE.READ(FN.IB.MESSAGE.TAG.SB, M.IB.MESSAGE.TAG.SB.ID, R.IB.MESSAGE.TAG.SB, YERR)
        TAG.VALUE = ""
        M.IB.MESSAGE.TAG.SB.ID *= 1
        LOCATE M.IB.MESSAGE.TAG.SB.ID IN MSG.DATA<MSG.TAG.ID,1> SETTING POS THEN
            TAG.VALUE = TRIM(MSG.DATA<MSG.TAG.VALUE,POS>)
        END

        Y.CALC.VALUE=""

        YMSG = "M.IB.MESSAGE.TAG.SB.ID=" : M.IB.MESSAGE.TAG.SB.ID : " VALUE=" : TAG.VALUE
        GOSUB LOG.ERROR

        LOCATE "IN" IN R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.DIRECTION,1> SETTING DIR.POS  THEN
            NO.APPS = DCOUNT( R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.APPLICATION,DIR.POS> , SM)
            FOR AA = 1 TO NO.APPS
                IF APP.NAME EQ R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.APPLICATION,DIR.POS,AA> THEN
                    IF R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONVERSION,DIR.POS,AA> THEN
                        YROUTINE = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.CONVERSION,DIR.POS,AA>[2,99]
                        YR.RETURN = TAG.VALUE
                        CALL @YROUTINE
                        TAG.VALUE = YR.RETURN
                        YMSG = "CALLING " : YROUTINE : " RETURN VALUE --> " :  YR.RETURN
                        GOSUB LOG.ERROR
                    END
                    DATA.POS = R.IB.MESSAGE.TAG.SB<IB.MSG.TAG.FLD.POS,DIR.POS,AA>
                    YFM = DATA.POS[",",1,1]
                    YVM = DATA.POS[",",2,1]
                    YSM = DATA.POS[",",3,1]
                    BEGIN CASE
                    CASE YFM AND YVM AND YSM
                        R.RECORD<YFM, YVM, YSM> = TAG.VALUE
                    CASE YFM AND YVM
                        R.RECORD<YFM, YVM> = TAG.VALUE
                    CASE YFM
                        R.RECORD<YFM> = TAG.VALUE
                    END CASE
                    YMSG = "YFM=" : YFM : " YVM=" : YVM : " YSM=" : YSM
                    GOSUB LOG.ERROR
                END
            NEXT AA
        END

    NEXT TT

    M.IB.ERMB.SB.ID = R.RECORD<IB.ERMB.FICH> : R.RECORD<IB.ERMB.IDFICH>

    TIME.STAMP = TIMEDATE()
    R.RECORD<IB.ERMB.CURR.NO> = 1
    R.RECORD<IB.ERMB.INPUTTER> = TNO:"_":OPERATOR
    R.RECORD<IB.ERMB.AUTHORISER> = TNO:"_":OPERATOR
    X = OCONV(DATE(),"D-")
    X = X[9,2]:X[1,2]:X[4,2]:TIME.STAMP[1,2]:TIME.STAMP[4,2]
    R.RECORD<IB.ERMB.DATE.TIME> = X
    R.RECORD<IB.ERMB.CO.CODE> = ID.COMPANY
    R.RECORD<IB.ERMB.DEPT.CODE>=R.USER<EB.USE.DEPARTMENT.CODE>
    WRITE R.RECORD TO F.IB.ERMB.SB, M.IB.ERMB.SB.ID ON ERROR NULL

    YMSG.LOG = FN.IB.ERMB.SB :" ID=" : M.IB.ERMB.SB.ID
    GOSUB WRITE.FILE.LOG

    RETURN


UPDATE.IB.EDST.SUMM.SB.FILE:

    GOSUB CLEAN.TAGS

    M.IB.EDST.SUMM.SB.ID = YR.FILE.JULDATE

    M.TAG.ID = ERMB.ID.TAGS

    YR.TERMINAL.ID = ""
    LOCATE M.TAG.ID IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
        YR.TERMINAL.ID = FMT(TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>),'R%10')
        M.IB.EDST.SUMM.SB.ID  := "." : YR.TERMINAL.ID
    END

    M.IB.EDST.SUMM.SB.ID := "." : YRECORD.TYPE

    YR.TAG.118.VALUE=""
    LOCATE "118" IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
        YR.TAG.118.VALUE = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
    END

    M.IB.EDST.SUMM.SB.ID  := "." : YR.TAG.118.VALUE

    CALL OCOMO("M.IB.EDST.SUMM.SB.ID=":M.IB.EDST.SUMM.SB.ID)

    READ R.IB.EDST.SUMM.SB FROM F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID ELSE NULL

    IF NOT(R.IB.EDST.SUMM.SB) THEN
        LAST.POS = 1
    END ELSE
        LAST.POS = DCOUNT(R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TXN.REF>,VM) + 1
    END

    GOSUB GET.TRANS.ID

    LOCATE YR.TRANS.KEY.ID IN R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TXN.REF,1> SETTING TRN.POS THEN
        YMSG.LOG = FN.IB.EDST.SUMM.SB : " FILE UPDATE SKIPPED TXN ALREADLY UPDATED " : YR.TRANS.KEY.ID
        GOSUB WRITE.FILE.LOG
    END ELSE
        R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TXN.REF,LAST.POS> =  YR.TRANS.KEY.ID
        TXN.AMT = ""
        LOCATE "8" IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
            TXN.AMT = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
            TXN.SIGN = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS+1>)
            IF TXN.SIGN = "C" THEN
                TXN.AMT *= -1
            END
        END

        YMSG = "YR.TERMINAL.ID=[" :  YR.TERMINAL.ID : "] TXN.AMT=[" : TXN.AMT : "]"
        CALL OCOMO(YMSG)
        IF TXN.AMT THEN
            R.IB.EDST.SUMM.SB<IB.EDST.SUMM.AMOUNT,LAST.POS> = TXN.AMT
            R.IB.EDST.SUMM.SB<IB.EDST.SUMM.TOTAMT> = SUM(R.IB.EDST.SUMM.SB<IB.EDST.SUMM.AMOUNT>)
            YMSG = "WRITING F.IB.EDST.SUMM.SB>" : M.IB.EDST.SUMM.SB.ID
            CALL OCOMO(YMSG)
            WRITE R.IB.EDST.SUMM.SB TO F.IB.EDST.SUMM.SB, M.IB.EDST.SUMM.SB.ID
        END
    END

    RETURN

INITIALISE:

    MODENV.CHECKING = @TRUE

    CHECK.MODENV.VALUE = "1"

    TEST.MODENV.REQ = @TRUE

    TEMP.LIST = ""
    CNT = 0
    FN.IB.FILE.TAGS.SB = "F.IB.FILE.TAGS.SB"
    F.IB.FILE.TAGS.SB =""
    CALL OPF(FN.IB.FILE.TAGS.SB, F.IB.FILE.TAGS.SB)

    FN.IB.MESSAGE.TAG.SB = "F.IB.MESSAGE.TAG.SB"
    F.IB.MESSAGE.TAG.SB = ""
    CALL OPF(FN.IB.MESSAGE.TAG.SB, F.IB.MESSAGE.TAG.SB)

    FN.IB.TAG.GRP.SB = "F.IB.TAG.GRP.SB"
    F.IB.TAG.GRP.SB = ""
    CALL OPF(FN.IB.TAG.GRP.SB, F.IB.TAG.GRP.SB)

    FN.IB.PARAMETER.SB = "F.IB.PARAMETER.SB"
    F.IB.PARAMETER.SB = ""
    CALL OPF(FN.IB.PARAMETER.SB, F.IB.PARAMETER.SB)

    FN.IB.FILE.PARAMETER.SB = "F.IB.FILE.PARAMETER.SB"
    F.IB.FILE.PARAMETER.SB=""
    CALL OPF(FN.IB.FILE.PARAMETER.SB, F.IB.FILE.PARAMETER.SB)

    FN.IN.FILE = "IB.CLEARING"
    OUT.PATH = ""
    CALL UNIX.FILE.PATH(OUT.PATH, FN.IN.FILE)
    OPEN "",FN.IN.FILE TO F.IN.FILE ELSE NULL

    FN.IN.ARC = FN.IN.FILE:".ARC"
    F.IN.ARC = ""
    OPEN "", FN.IN.ARC TO F.IN.ARC ELSE NULL

    ARC.PATH =""
    CALL UNIX.FILE.PATH(ARC.PATH, FN.IN.ARC)

    FN.IB.ATM.MESSAGE.LOG.SB = "F.IB.ATM.MESSAGE.LOG.SB"
    F.IB.ATM.MESSAGE.LOG.SB = ""
    CALL OPF(FN.IB.ATM.MESSAGE.LOG.SB, F.IB.ATM.MESSAGE.LOG.SB)

    FN.IB.EDST.SUMM.SB = "F.IB.EDST.SUMM.SB"
    F.IB.EDST.SUMM.SB = ""
    CALL OPF(FN.IB.EDST.SUMM.SB, F.IB.EDST.SUMM.SB)

    OPEN "",FN.IN.FILE TO F.IN.FILE ELSE
        CALL OCOMO( "FILE OPEN ERROR " : FN.IN.FILE )
    END

    YR.INTERFACE = "FILE"

    CALL F.READ(FN.IB.PARAMETER.SB, "SYSTEM", R.IB.PARAMETER.SB, F.IB.PARAMETER.SB, YERR)

    CALL F.READ(FN.IB.FILE.PARAMETER.SB, "SYSTEM", R.IB.FILE.PARAMETER.SB, F.IB.FILE.PARAMETER.SB, YERR)

    CALL IB.ATM.COMMON.LOAD.SB

    CALL OCOMO("PARAMETERS")

    YR.PL.ONLY = R.IB.FILE.PARAMETER.SB<IB.FILE.PARM.PL.ONLY.TAG>
    CALL OCOMO("YR.PL.ONLY=" : RAISE(YR.PL.ONLY))

    YR.MODENV.LIST = R.IB.FILE.PARAMETER.SB<IB.FILE.PARM.MODENV.LIST>
    CALL OCOMO("YR.MODENV.LIST=": RAISE(YR.MODENV.LIST))

    YR.MODENV.TAG = R.IB.FILE.PARAMETER.SB<IB.FILE.PARM.MODENV.TAG> * 1

    YR.SISTPAG.TAG = R.IB.FILE.PARAMETER.SB<IB.FILE.PARM.SISTPAG.TAG> * 1

    OFS$SOURCE.ID = "IBFILE"

    SAVE.APPL = APPLICATION
    SAVE.V = V

    FN.OFS.SOURCE = "F.OFS.SOURCE"
    CALL CACHE.READ(FN.OFS.SOURCE, OFS$SOURCE.ID, OFS$SOURCE.REC, ERR)

    EORI.KEY.TAGS = R.IB.FILE.PARAMETER.SB<IB.FILE.PARM.EORI.KEY.TAG>

    ERMB.ID.TAGS = R.IB.FILE.PARAMETER.SB<IB.FILE.PARM.ERMB.ID.TAG> * 1

    ABORT.PROCESS = 0

    PROCESS.NAME = BATCH.INFO<1>

    YR.EDST.SUMM = 0

    EORI.TAG.330 = 0
    TAG.330 = 330

    TAG.CODRESP = "12"

    TAG.NRIDRESP = "13"

    TAG.NRLOG = 117

    FILE.VARIABLE.DATA = RAISE(R.IB.FILE.PARAMETER.SB<IB.FILE.PARM.VAR.DATA.TAGS>)

    CALL OCOMO("FILE.VARIABLE.DATA=" : FILE.VARIABLE.DATA )

    F.BATCH.STATUS = ""
    FN.BATCH.STATUS = "F.BATCH.STATUS"
    CALL OPF(FN.BATCH.STATUS,F.BATCH.STATUS)

    F.LOCKING = ""
    FN.LOCKING = "F.LOCKING"
    CALL OPF(FN.LOCKING, F.LOCKING)

    F.TSA.SERVICE = ""
    FN.TSA.SERVICE = "F.TSA.SERVICE"
    CALL OPF(FN.TSA.SERVICE,F.TSA.SERVICE)

    FN.IB.CORR.FILE.SB = "F.IB.CORR.FILE.SB"
    F.IB.CORR.FILE.SB = ""
    CALL OPF(FN.IB.CORR.FILE.SB, F.IB.CORR.FILE.SB)

    FN.IB.CORR.FILE.SB.HIST = "F.IB.CORR.FILE.SB$HIS"
    F.IB.CORR.FILE.SB.HIST = ""
    CALL OPF(FN.IB.CORR.FILE.SB.HIST, F.IB.CORR.FILE.SB.HIST)

    FN.IB.ERMB.SB = "F.IB.ERMB.SB"
    F.IB.ERMB.SB =""
    CALL OPF(FN.IB.ERMB.SB, F.IB.ERMB.SB)

    FN.IB.EORI.JULDATE.SB = "F.IB.EORI.JULDATE.SB"
    F.IB.EORI.JULDATE.SB = ""
    CALL OPF(FN.IB.EORI.JULDATE.SB, F.IB.EORI.JULDATE.SB)

    RETURN

CHECK.PROCESS.RULES:

    CALL OCOMO("CHECK-RULES WITH PARAMS [ YR.FILE.TYPE=" : YR.FILE.TYPE : " YRECORD.TYPE=": YRECORD.TYPE : " ]")
    M.CONTINUE = 0

    BEGIN CASE

    CASE YR.EDST.SUMM
        CALL OCOMO("YR.EDST.SUMM=" : YR.EDST.SUMM : " ALWAYS UPDATE")
        M.CONTINUE = 1
    CASE YR.FILE.TYPE = "CCLN"
        LOCATE "161.1" IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.RETURN = YR.MESSAGE.ARRAY<2,POS>
            CALL IB.TAG.161.SB
            IF YR.RETURN THEN
                M.CONTINUE = 1
            END
        END

    CASE YR.FILE.TYPE = "EORI" AND (YRECORD.TYPE = "2" OR YRECORD.TYPE = "1")
        M.CONTINUE = 1
        CALL OCOMO("FILE TYPE=EORI AND TIPREG=" : YRECORD.TYPE :" - SET UPDATE TO TRUE")

    CASE YRECORD.TYPE = "3"
        GOSUB MESSAGE.THREE.PROCESS

    CASE YR.FILE.TYPE = "EDST" AND YRECORD.TYPE = "1"
        M.CONTINUE = 1
        GOSUB MESSAGE.ONE.TWO.PROCESS

    CASE YR.FILE.TYPE = "EDST" AND YRECORD.TYPE = "2"
        M.CONTINUE = 1
        GOSUB MESSAGE.ONE.TWO.PROCESS

    CASE YRECORD.TYPE = "6"
        CALL OCOMO('YRECORD.TYPE = "6"')

        LOCATE YR.SISTPAG.TAG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.SISTPAG = YR.MESSAGE.ARRAY<2,POS>
            YMSG = "YR.SISTPAG=" : YR.SISTPAG
            CALL OCOMO(YMSG)
            IF YR.SISTPAG = "9" THEN
                M.CONTINUE = 1
            END
        END

    END CASE

    CALL OCOMO("RETURN M.CONTINUE=" : M.CONTINUE )

    RETURN

MESSAGE.ONE.TWO.PROCESS:

    YMSG = "TESTING VALUE OF TAG.CODRESP SEEKING [N] IS THIS REVERSAL"
    GOSUB LOG.ERROR

    LOCATE TAG.CODRESP IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
        CODRESP.VALUE = TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
        IF CODRESP.VALUE  = "N" THEN
            GOSUB GET.REVERSAL.ID
            YMSG = "CODRESP VALUE [N] - DUPLICATE TEST ? " : IFS(M.CONTINUE=1,"ORG ENTRY POSTED","ORG ENTRY NOT FOUND - SKIP")
            RETURN
        END
    END

    YMSG = "TEST MODENV FOR VALUE <> " : CHECK.MODENV.VALUE
    GOSUB LOG.ERROR

    IF TEST.MODENV.REQ THEN
        LOCATE YR.MODENV.TAG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
            YR.MODENV.VALUE = YR.MESSAGE.ARRAY<2,POS>
            YMSG =  "YR.MODENV.VALUE=" : YR.MODENV.VALUE
            CALL OCOMO(YMSG)
            IF YR.MODENV.VALUE EQ CHECK.MODENV.VALUE THEN
                M.CONTINUE = 0
                YMSG = "MODENV HAS VALUE [" : CHECK.MODENV.VALUE : "] TIPREG [" : YRECORD.TYPE : "] - SKIP"
                GOSUB LOG.ERROR
                RETURN
            END
            M.CONTINUE = 1
            YMSG = "PROCESS MESSAGE MODENV [" : YR.MODENV.VALUE : "]"
            GOSUB LOG.ERROR
            RETURN
        END
    END

    YMSG = "STANDARD PROCESSING - CHECK MODENV FOR VALUES ON PARAMETER THIS RUN SETTINGS [" : MODENV.CHECKING : "]"
    GOSUB LOG.ERROR

    IF MODENV.CHECKING THEN
        LOCATE YR.MODENV.VALUE IN YR.MODENV.LIST<1,1> SETTING POS THEN
            M.CONTINUE = 1
            YMSG = "YR.MODENV.VALUE=" : YR.MODENV.VALUE  : " CONDITION MET"
        END ELSE
            YMSG = "YR.MODENV.VALUE=" : YR.MODENV.VALUE  : " CONDITION NOT MET - SKIP"
        END

        GOSUB LOG.ERROR
    END

    RETURN

MESSAGE.THREE.PROCESS:

    CALL OCOMO('TEST YR.MODENV.TAG - YRECORD.TYPE = "3" OR (YR.FILE.TYPE = "EDST" AND YRECORD.TYPE = "2"')
    LOCATE YR.MODENV.TAG IN YR.MESSAGE.ARRAY<1,1> SETTING POS THEN
        YR.MODENV.VALUE = YR.MESSAGE.ARRAY<2,POS>
        YMSG =  "YR.MODENV.VALUE=" : YR.MODENV.VALUE
        CALL OCOMO(YMSG)
        LOCATE YR.MODENV.VALUE IN YR.MODENV.LIST<1,1> SETTING POS THEN
            M.CONTINUE = 1
        END
    END

    YMSG = "MODEENV [" : YR.MODENV.VALUE : "] TEST RESULT " : IFS( M.CONTINUE= 1," FOUND - CONTINUE"," NOT FOUND - SKIP")

    RETURN

UPDATE.STATUS:

    IF POS.PL THEN
        IF RIGHT(YR.TRANS.KEY.ID,2) <> "PL" THEN
            YR.TRANS.KEY.ID := "PL"
        END
    END

    READ R.IB.ATM.MESSAGE.LOG.SB FROM F.IB.ATM.MESSAGE.LOG.SB, YR.TRANS.KEY.ID ELSE NULL

    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.STATUS> = "PROCESSED"
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.TIME.STAMP> = OCONV(DATE(),"D/E") : " " : OCONV(TIME(), "MTS")
    R.IB.ATM.MESSAGE.LOG.SB< IB.LOG.GLOBUS.FT.NO>= ID.NEW
    IF IN.MSG.TYPE[1,1] = 2 THEN
        REV.IND = "Y"
    END ELSE
        REV.IND = "N"
    END
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.REVERSAL.IND>= REV.IND
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.ACT.TIMESTAMP>= TIMEDATE()
    R.IB.ATM.MESSAGE.LOG.SB<IB.LOG.OFS.COMPANY> = OFS.COMPANY
    WRITE R.IB.ATM.MESSAGE.LOG.SB TO F.IB.ATM.MESSAGE.LOG.SB, YR.TRANS.KEY.ID ON ERROR NULL
    CALL OCOMO("WRITING " : FN.IB.ATM.MESSAGE.LOG.SB : " [" : YR.TRANS.KEY.ID : "]")

    M.IB.CORR.FILE.SB.ID = YR.TRANS.KEY.ID
    READ R.IB.CORR.FILE.SB FROM F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID THEN
        M.IB.CORR.FILE.SB.HIST.ID = M.IB.CORR.FILE.SB.ID : ";" : R.IB.CORR.FILE.SB< IB.CORR.CURR.NO >
        WRITE R.IB.CORR.FILE.SB TO F.IB.CORR.FILE.SB.HIST, M.IB.CORR.FILE.SB.HIST.ID ON ERROR NULL
        DELETE F.IB.CORR.FILE.SB, M.IB.CORR.FILE.SB.ID
    END

    RETURN

GET.REVERSAL.ID:

    YR.ORG.ID = ""
    REV.TRANS.KEY.ID = ""
    NO.IDS = DCOUNT(R.IB.PARAMETER.SB<IB.PARM.REV.MSG.KEY>,VM)
    FOR KK = 1 TO NO.IDS
        TAG.ID = TRIM(R.IB.PARAMETER.SB<IB.PARM.REV.MSG.KEY,KK>,  "0", "L")
        LOCATE TAG.ID IN YR.MESSAGE.ARRAY<MSG.TAG.ID,1> SETTING POS THEN
            REV.TRANS.KEY.ID := TRIM(YR.MESSAGE.ARRAY<MSG.TAG.VALUE,POS>)
        END
    NEXT KK
    M.CONTINUE = 0
    READ R.TEMP FROM  F.IB.ATM.MESSAGE.LOG.SB, REV.TRANS.KEY.ID THEN
        YR.ORG.ID =  R.TEMP<IB.LOG.GLOBUS.FT.NO>
        YMSG = "ORIGINAL TXN=" :  YR.ORG.ID
        GOSUB LOG.ERROR
        M.CONTINUE = 1
    END

    YMSG = "REVERSAL KEY [" : REV.TRANS.KEY.ID : "] FOUND ON IB.ATM.MESSAGE.LOG.SB ? " : IFS(M.CONTINUE=1,"YES","NO")
    GOSUB LOG.ERROR

    RETURN

POST.AC.LOCKED.EVENTS:

    CALL OCOMO("BEGIN AC.LOCKED REVERSAL")
    INMSG = ""
    CALL OCOMO("CALLING IB.ATM.MSG.TEXT.IN")
    CALL IB.ATM.MSG.TEXT.IN ( INMSG )
    CALL OCOMO("RETURN-VALUE=" : INMSG)
    IF INMSG THEN
        REQUEST = INMSG
        RESPONSE = ""
        HUSH ON
        CALL OFS.PROCESS.MANAGER(REQUEST,RESPONSE)
        HUSH OFF
        CALL OCOMO("RESPONSE=" : RESPONSE)
        YMSG.LOG = "RESPONSE : " : RESPONSE
        GOSUB WRITE.FILE.LOG
        ID.NEW = RESPONSE["/",1,1]
        YSTATUS = RESPONSE[",",1,1]["/",3,1]
        IF YSTATUS = 1 THEN
            GOSUB UPDATE.STATUS
        END ELSE
            GOSUB UPDATE.ERROR
        END
    END
    RETURN

WRITE.FILE.LOG:

    IF YR.EDST.SUMM THEN RETURN
    CALL OCOMO("WRITE-" : YMSG.LOG)
    WRITESEQ YMSG.LOG TO F.OUTPUT ELSE NULL

    RETURN

LOG.ERROR:

    CALL OCOMO(YMSG)

    RETURN

END
